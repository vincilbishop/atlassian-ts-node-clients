/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Component } from './component';
import { IssueAllOf } from './issueAllOf';
import { IssueAllOfContent } from './issueAllOfContent';
import { IssueAllOfLinks } from './issueAllOfLinks';
import { Milestone } from './milestone';
import { ModelObject } from './modelObject';
import { Repository } from './repository';
import { User } from './user';
import { Version } from './version';

export class Issue extends ModelObject {
    'links'?: IssueAllOfLinks;
    'id'?: number;
    'repository'?: Repository;
    'title'?: string;
    'reporter'?: User;
    'assignee'?: User;
    'createdOn'?: Date;
    'updatedOn'?: Date;
    'editedOn'?: Date;
    'state'?: Issue.StateEnum;
    'kind'?: Issue.KindEnum;
    'priority'?: Issue.PriorityEnum;
    'milestone'?: Milestone;
    'version'?: Version;
    'component'?: Component;
    'votes'?: number;
    'content'?: IssueAllOfContent;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "links",
            "baseName": "links",
            "type": "IssueAllOfLinks"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "repository",
            "baseName": "repository",
            "type": "Repository"
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string"
        },
        {
            "name": "reporter",
            "baseName": "reporter",
            "type": "User"
        },
        {
            "name": "assignee",
            "baseName": "assignee",
            "type": "User"
        },
        {
            "name": "createdOn",
            "baseName": "created_on",
            "type": "Date"
        },
        {
            "name": "updatedOn",
            "baseName": "updated_on",
            "type": "Date"
        },
        {
            "name": "editedOn",
            "baseName": "edited_on",
            "type": "Date"
        },
        {
            "name": "state",
            "baseName": "state",
            "type": "Issue.StateEnum"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "Issue.KindEnum"
        },
        {
            "name": "priority",
            "baseName": "priority",
            "type": "Issue.PriorityEnum"
        },
        {
            "name": "milestone",
            "baseName": "milestone",
            "type": "Milestone"
        },
        {
            "name": "version",
            "baseName": "version",
            "type": "Version"
        },
        {
            "name": "component",
            "baseName": "component",
            "type": "Component"
        },
        {
            "name": "votes",
            "baseName": "votes",
            "type": "number"
        },
        {
            "name": "content",
            "baseName": "content",
            "type": "IssueAllOfContent"
        }    ];

    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(Issue.attributeTypeMap);
    }
}

export namespace Issue {
    export enum StateEnum {
        New = <any> 'new',
        Open = <any> 'open',
        Resolved = <any> 'resolved',
        OnHold = <any> 'on hold',
        Invalid = <any> 'invalid',
        Duplicate = <any> 'duplicate',
        Wontfix = <any> 'wontfix',
        Closed = <any> 'closed'
    }
    export enum KindEnum {
        Bug = <any> 'bug',
        Enhancement = <any> 'enhancement',
        Proposal = <any> 'proposal',
        Task = <any> 'task'
    }
    export enum PriorityEnum {
        Trivial = <any> 'trivial',
        Minor = <any> 'minor',
        Major = <any> 'major',
        Critical = <any> 'critical',
        Blocker = <any> 'blocker'
    }
}
