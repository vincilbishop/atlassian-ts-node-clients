/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Account } from './account';
import { Branch } from './branch';
import { ModelObject } from './modelObject';
import { Project } from './project';
import { RepositoryAllOf } from './repositoryAllOf';
import { RepositoryAllOfLinks } from './repositoryAllOfLinks';

export class Repository extends ModelObject {
    'links'?: RepositoryAllOfLinks;
    /**
    * The repository\'s immutable id. This can be used as a substitute for the slug segment in URLs. Doing this guarantees your URLs will survive renaming of the repository by its owner, or even transfer of the repository to a different user.
    */
    'uuid'?: string;
    /**
    * The concatenation of the repository owner\'s username and the slugified name, e.g. \"evzijst/interruptingcow\". This is the same string used in Bitbucket URLs.
    */
    'fullName'?: string;
    'isPrivate'?: boolean;
    'parent'?: Repository;
    'scm'?: Repository.ScmEnum;
    'owner'?: Account;
    'name'?: string;
    'description'?: string;
    'createdOn'?: Date;
    'updatedOn'?: Date;
    'size'?: number;
    'language'?: string;
    'hasIssues'?: boolean;
    'hasWiki'?: boolean;
    /**
    *  Controls the rules for forking this repository.  * **allow_forks**: unrestricted forking * **no_public_forks**: restrict forking to private forks (forks cannot   be made public later) * **no_forks**: deny all forking 
    */
    'forkPolicy'?: Repository.ForkPolicyEnum;
    'project'?: Project;
    'mainbranch'?: Branch;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "links",
            "baseName": "links",
            "type": "RepositoryAllOfLinks"
        },
        {
            "name": "uuid",
            "baseName": "uuid",
            "type": "string"
        },
        {
            "name": "fullName",
            "baseName": "full_name",
            "type": "string"
        },
        {
            "name": "isPrivate",
            "baseName": "is_private",
            "type": "boolean"
        },
        {
            "name": "parent",
            "baseName": "parent",
            "type": "Repository"
        },
        {
            "name": "scm",
            "baseName": "scm",
            "type": "Repository.ScmEnum"
        },
        {
            "name": "owner",
            "baseName": "owner",
            "type": "Account"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "createdOn",
            "baseName": "created_on",
            "type": "Date"
        },
        {
            "name": "updatedOn",
            "baseName": "updated_on",
            "type": "Date"
        },
        {
            "name": "size",
            "baseName": "size",
            "type": "number"
        },
        {
            "name": "language",
            "baseName": "language",
            "type": "string"
        },
        {
            "name": "hasIssues",
            "baseName": "has_issues",
            "type": "boolean"
        },
        {
            "name": "hasWiki",
            "baseName": "has_wiki",
            "type": "boolean"
        },
        {
            "name": "forkPolicy",
            "baseName": "fork_policy",
            "type": "Repository.ForkPolicyEnum"
        },
        {
            "name": "project",
            "baseName": "project",
            "type": "Project"
        },
        {
            "name": "mainbranch",
            "baseName": "mainbranch",
            "type": "Branch"
        }    ];

    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(Repository.attributeTypeMap);
    }
}

export namespace Repository {
    export enum ScmEnum {
        Hg = <any> 'hg',
        Git = <any> 'git'
    }
    export enum ForkPolicyEnum {
        AllowForks = <any> 'allow_forks',
        NoPublicForks = <any> 'no_public_forks',
        NoForks = <any> 'no_forks'
    }
}
