/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Account } from './account';
import { BranchrestrictionAllOf } from './branchrestrictionAllOf';
import { Group } from './group';
import { MilestoneAllOfLinks } from './milestoneAllOfLinks';
import { ModelObject } from './modelObject';

export class Branchrestriction extends ModelObject {
    'links'?: MilestoneAllOfLinks;
    /**
    * The branch restriction status\' id.
    */
    'id'?: number;
    /**
    * The type of restriction that is being applied.
    */
    'kind': Branchrestriction.KindEnum;
    /**
    * Indicates how the restriction is matched against a branch. The default is `glob`.
    */
    'branchMatchKind': Branchrestriction.BranchMatchKindEnum;
    /**
    * Apply the restriction to branches of this type. Active when `branch_match_kind` is `branching_model`. The branch type will be calculated using the branching model configured for the repository.
    */
    'branchType'?: Branchrestriction.BranchTypeEnum;
    /**
    * Apply the restriction to branches that match this pattern. Active when `branch_match_kind` is `glob`. Will be empty when `branch_match_kind` is `branching_model`.
    */
    'pattern': string;
    'users'?: Array<Account>;
    'groups'?: Array<Group>;
    /**
    * Value with kind-specific semantics: \"require_approvals_to_merge\" uses it to require a minimum number of approvals on a PR; \"require_passing_builds_to_merge\" uses it to require a minimum number of passing builds.
    */
    'value'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "links",
            "baseName": "links",
            "type": "MilestoneAllOfLinks"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "Branchrestriction.KindEnum"
        },
        {
            "name": "branchMatchKind",
            "baseName": "branch_match_kind",
            "type": "Branchrestriction.BranchMatchKindEnum"
        },
        {
            "name": "branchType",
            "baseName": "branch_type",
            "type": "Branchrestriction.BranchTypeEnum"
        },
        {
            "name": "pattern",
            "baseName": "pattern",
            "type": "string"
        },
        {
            "name": "users",
            "baseName": "users",
            "type": "Array<Account>"
        },
        {
            "name": "groups",
            "baseName": "groups",
            "type": "Array<Group>"
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(Branchrestriction.attributeTypeMap);
    }
}

export namespace Branchrestriction {
    export enum KindEnum {
        RequireTasksToBeCompleted = <any> 'require_tasks_to_be_completed',
        RequirePassingBuildsToMerge = <any> 'require_passing_builds_to_merge',
        Force = <any> 'force',
        RequireAllDependenciesMerged = <any> 'require_all_dependencies_merged',
        Push = <any> 'push',
        RequireApprovalsToMerge = <any> 'require_approvals_to_merge',
        EnforceMergeChecks = <any> 'enforce_merge_checks',
        RestrictMerges = <any> 'restrict_merges',
        ResetPullrequestApprovalsOnChange = <any> 'reset_pullrequest_approvals_on_change',
        Delete = <any> 'delete'
    }
    export enum BranchMatchKindEnum {
        BranchingModel = <any> 'branching_model',
        Glob = <any> 'glob'
    }
    export enum BranchTypeEnum {
        Feature = <any> 'feature',
        Bugfix = <any> 'bugfix',
        Release = <any> 'release',
        Hotfix = <any> 'hotfix',
        Development = <any> 'development',
        Production = <any> 'production'
    }
}
