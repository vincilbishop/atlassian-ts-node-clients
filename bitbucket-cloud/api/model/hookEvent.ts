/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


/**
* An event, associated with a resource or subject type.
*/
export class HookEvent {
    /**
    * The event identifier.
    */
    'event'?: HookEvent.EventEnum;
    /**
    * The category this event belongs to.
    */
    'category'?: string;
    /**
    * Summary of the webhook event type.
    */
    'label'?: string;
    /**
    * More detailed description of the webhook event type.
    */
    'description'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "event",
            "baseName": "event",
            "type": "HookEvent.EventEnum"
        },
        {
            "name": "category",
            "baseName": "category",
            "type": "string"
        },
        {
            "name": "label",
            "baseName": "label",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return HookEvent.attributeTypeMap;
    }
}

export namespace HookEvent {
    export enum EventEnum {
        Pullrequestunapproved = <any> 'pullrequest:unapproved',
        IssuecommentCreated = <any> 'issue:comment_created',
        Pullrequestapproved = <any> 'pullrequest:approved',
        Repocreated = <any> 'repo:created',
        Repodeleted = <any> 'repo:deleted',
        Repoimported = <any> 'repo:imported',
        PullrequestcommentUpdated = <any> 'pullrequest:comment_updated',
        Issueupdated = <any> 'issue:updated',
        Projectupdated = <any> 'project:updated',
        PullrequestcommentCreated = <any> 'pullrequest:comment_created',
        RepocommitStatusUpdated = <any> 'repo:commit_status_updated',
        Pullrequestupdated = <any> 'pullrequest:updated',
        Issuecreated = <any> 'issue:created',
        Repofork = <any> 'repo:fork',
        PullrequestcommentDeleted = <any> 'pullrequest:comment_deleted',
        RepocommitStatusCreated = <any> 'repo:commit_status_created',
        Repoupdated = <any> 'repo:updated',
        Pullrequestrejected = <any> 'pullrequest:rejected',
        Pullrequestfulfilled = <any> 'pullrequest:fulfilled',
        Repopush = <any> 'repo:push',
        Pullrequestcreated = <any> 'pullrequest:created',
        Repotransfer = <any> 'repo:transfer',
        RepocommitCommentCreated = <any> 'repo:commit_comment_created'
    }
}
