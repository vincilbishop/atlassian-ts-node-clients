/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import localVarRequest = require('request');
import http = require('http');

/* tslint:disable:no-unused-locals */
import { PaginatedPipelineKnownHosts } from '../model/paginatedPipelineKnownHosts';
import { PaginatedPipelineScheduleExecutions } from '../model/paginatedPipelineScheduleExecutions';
import { PaginatedPipelineSchedules } from '../model/paginatedPipelineSchedules';
import { PaginatedPipelineSteps } from '../model/paginatedPipelineSteps';
import { PaginatedPipelineVariables } from '../model/paginatedPipelineVariables';
import { PaginatedPipelines } from '../model/paginatedPipelines';
import { Pipeline } from '../model/pipeline';
import { PipelineBuildNumber } from '../model/pipelineBuildNumber';
import { PipelineKnownHost } from '../model/pipelineKnownHost';
import { PipelineSchedule } from '../model/pipelineSchedule';
import { PipelineSshKeyPair } from '../model/pipelineSshKeyPair';
import { PipelineStep } from '../model/pipelineStep';
import { PipelineVariable } from '../model/pipelineVariable';
import { PipelinesConfig } from '../model/pipelinesConfig';

import { ObjectSerializer, Authentication, VoidAuth } from '../model/models';

let defaultBasePath = 'https://api.bitbucket.org/2.0';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum PipelinesApiApiKeys {
}

export class PipelinesApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: PipelinesApiApiKeys, value: string) {
        (this.authentications as any)[PipelinesApiApiKeys[key]].apiKey = value;
    }

    /**
     * Endpoint to create and initiate a pipeline.  There are a couple of different options to initiate a pipeline, where the payload of the request will determine which type of pipeline will be instantiated. # Trigger a Pipeline for a branch One way to trigger pipelines is by specifying the branch for which you want to trigger a pipeline.  The specified branch will be used to determine which pipeline definition from the `bitbucket-pipelines.yml` file will be applied to initiate the pipeline. The pipeline will then do a clone of the repository and checkout the latest revision of the specified branch.  ### Example  ``` $ curl -X POST -is -u username:password \\   -H \'Content-Type: application/json\' \\  https://api.bitbucket.org/2.0/repositories/jeroendr/meat-demo2/pipelines/ \\   -d \'   {     \"target\": {       \"ref_type\": \"branch\",        \"type\": \"pipeline_ref_target\",        \"ref_name\": \"master\"     }   }\' ``` # Trigger a Pipeline for a commit on a branch or tag You can initiate a pipeline for a specific commit and in the context of a specified reference (e.g. a branch, tag or bookmark). The specified reference will be used to determine which pipeline definition from the bitbucket-pipelines.yml file will be applied to initiate the pipeline. The pipeline will clone the repository and then do a checkout the specified reference.   The following reference types are supported:  * `branch`  * `named_branch` * `bookmark`   * `tag`  ### Example  ``` $ curl -X POST -is -u username:password \\   -H \'Content-Type: application/json\' \\   https://api.bitbucket.org/2.0/repositories/jeroendr/meat-demo2/pipelines/ \\   -d \'   {     \"target\": {       \"commit\": {         \"type\": \"commit\",          \"hash\": \"ce5b7431602f7cbba007062eeb55225c6e18e956\"       },        \"ref_type\": \"branch\",        \"type\": \"pipeline_ref_target\",        \"ref_name\": \"master\"     }   }\' ``` # Trigger a specific pipeline definition for a commit You can trigger a specific pipeline that is defined in your `bitbucket-pipelines.yml` file for a specific commit.  In addition to the commit revision, you specify the type and pattern of the selector that identifies the pipeline definition. The resulting pipeline will then clone the repository and checkout the specified revision.  ### Example  ``` $ curl -X POST -is -u username:password \\   -H \'Content-Type: application/json\' \\  https://api.bitbucket.org/2.0/repositories/jeroendr/meat-demo2/pipelines/ \\  -d \'   {      \"target\": {       \"commit\": {          \"hash\":\"a3c4e02c9a3755eccdc3764e6ea13facdf30f923\",          \"type\":\"commit\"        },         \"selector\": {            \"type\":\"custom\",               \"pattern\":\"Deploy to production\"           },         \"type\":\"pipeline_commit_target\"    }   }\' ``` # Trigger a specific pipeline definition for a commit on a branch or tag You can trigger a specific pipeline that is defined in your `bitbucket-pipelines.yml` file for a specific commit in the context of a specified reference.  In addition to the commit revision, you specify the type and pattern of the selector that identifies the pipeline definition, as well as the reference information. The resulting pipeline will then clone the repository a checkout the specified reference.  ### Example  ``` $ curl -X POST -is -u username:password \\   -H \'Content-Type: application/json\' \\  https://api.bitbucket.org/2.0/repositories/jeroendr/meat-demo2/pipelines/ \\  -d \'   {      \"target\": {       \"commit\": {          \"hash\":\"a3c4e02c9a3755eccdc3764e6ea13facdf30f923\",          \"type\":\"commit\"        },        \"selector\": {           \"type\": \"custom\",           \"pattern\": \"Deploy to production\"        },        \"type\": \"pipeline_ref_target\",        \"ref_name\": \"master\",        \"ref_type\": \"branch\"      }   }\' ```   # Trigger a custom pipeline with variables In addition to triggering a custom pipeline that is defined in your `bitbucket-pipelines.yml` file as shown in the examples above, you can specify variables that will be available for your build. In the request, provide a list of variables, specifying the following for each variable: key, value, and whether it should be secured or not (this field is optional and defaults to not secured).  ### Example  ``` $ curl -X POST -is -u username:password \\   -H \'Content-Type: application/json\' \\  https://api.bitbucket.org/2.0/repositories/{workspace}/{repo_slug}/pipelines/ \\  -d \'   {     \"target\": {       \"type\": \"pipeline_ref_target\",       \"ref_type\": \"branch\",       \"ref_name\": \"master\",       \"selector\": {         \"type\": \"custom\",         \"pattern\": \"Deploy to production\"       }     },     \"variables\": [       {         \"key\": \"var1key\",         \"value\": \"var1value\",         \"secured\": true       },       {         \"key\": \"var2key\",         \"value\": \"var2value\"       }     ]   }\' ``` 
     * @param username The account.
     * @param repoSlug The repository.
     * @param body The pipeline to initiate.
     */
    public async createPipelineForRepository (username: string, repoSlug: string, body: Pipeline, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Pipeline;  }> {
        const localVarPath = this.basePath + '/repositories/{workspace}/{repo_slug}/pipelines/'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling createPipelineForRepository.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling createPipelineForRepository.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createPipelineForRepository.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "Pipeline")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: Pipeline;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "Pipeline");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Create an account level variable.
     * @param username The account.
     * @param body The variable to create.
     */
    public async createPipelineVariableForTeam (username: string, body?: PipelineVariable, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PipelineVariable;  }> {
        const localVarPath = this.basePath + '/teams/{username}/pipelines_config/variables/'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling createPipelineVariableForTeam.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "PipelineVariable")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: PipelineVariable;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "PipelineVariable");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Create a user level variable.
     * @param username The account.
     * @param body The variable to create.
     */
    public async createPipelineVariableForUser (username: string, body?: PipelineVariable, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PipelineVariable;  }> {
        const localVarPath = this.basePath + '/users/{username}/pipelines_config/variables/'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling createPipelineVariableForUser.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "PipelineVariable")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: PipelineVariable;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "PipelineVariable");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Create a repository level known host.
     * @param username The account.
     * @param repoSlug The repository.
     * @param body The known host to create.
     */
    public async createRepositoryPipelineKnownHost (username: string, repoSlug: string, body: PipelineKnownHost, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PipelineKnownHost;  }> {
        const localVarPath = this.basePath + '/repositories/{workspace}/{repo_slug}/pipelines_config/ssh/known_hosts/'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling createRepositoryPipelineKnownHost.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling createRepositoryPipelineKnownHost.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createRepositoryPipelineKnownHost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "PipelineKnownHost")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: PipelineKnownHost;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "PipelineKnownHost");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Create a schedule for the given repository.
     * @param username The account.
     * @param repoSlug The repository.
     * @param body The schedule to create.
     */
    public async createRepositoryPipelineSchedule (username: string, repoSlug: string, body: PipelineSchedule, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PipelineSchedule;  }> {
        const localVarPath = this.basePath + '/repositories/{workspace}/{repo_slug}/pipelines_config/schedules/'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling createRepositoryPipelineSchedule.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling createRepositoryPipelineSchedule.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createRepositoryPipelineSchedule.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "PipelineSchedule")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: PipelineSchedule;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "PipelineSchedule");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Create a repository level variable.
     * @param username The account.
     * @param repoSlug The repository.
     * @param body The variable to create.
     */
    public async createRepositoryPipelineVariable (username: string, repoSlug: string, body: PipelineVariable, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PipelineVariable;  }> {
        const localVarPath = this.basePath + '/repositories/{workspace}/{repo_slug}/pipelines_config/variables/'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling createRepositoryPipelineVariable.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling createRepositoryPipelineVariable.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createRepositoryPipelineVariable.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "PipelineVariable")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: PipelineVariable;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "PipelineVariable");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Delete a team level variable.
     * @param username The account.
     * @param variableUuid The UUID of the variable to delete.
     */
    public async deletePipelineVariableForTeam (username: string, variableUuid: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/teams/{username}/pipelines_config/variables/{variable_uuid}'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'variable_uuid' + '}', encodeURIComponent(String(variableUuid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling deletePipelineVariableForTeam.');
        }

        // verify required parameter 'variableUuid' is not null or undefined
        if (variableUuid === null || variableUuid === undefined) {
            throw new Error('Required parameter variableUuid was null or undefined when calling deletePipelineVariableForTeam.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Delete an account level variable.
     * @param username The account.
     * @param variableUuid The UUID of the variable to delete.
     */
    public async deletePipelineVariableForUser (username: string, variableUuid: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/users/{username}/pipelines_config/variables/{variable_uuid}'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'variable_uuid' + '}', encodeURIComponent(String(variableUuid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling deletePipelineVariableForUser.');
        }

        // verify required parameter 'variableUuid' is not null or undefined
        if (variableUuid === null || variableUuid === undefined) {
            throw new Error('Required parameter variableUuid was null or undefined when calling deletePipelineVariableForUser.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Delete the repository SSH key pair.
     * @param username The account.
     * @param repoSlug The repository.
     */
    public async deleteRepositoryPipelineKeyPair (username: string, repoSlug: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/repositories/{workspace}/{repo_slug}/pipelines_config/ssh/key_pair'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling deleteRepositoryPipelineKeyPair.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling deleteRepositoryPipelineKeyPair.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Delete a repository level known host.
     * @param username The account.
     * @param repoSlug The repository.
     * @param knownHostUuid The UUID of the known host to delete.
     */
    public async deleteRepositoryPipelineKnownHost (username: string, repoSlug: string, knownHostUuid: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/repositories/{workspace}/{repo_slug}/pipelines_config/ssh/known_hosts/{known_host_uuid}'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)))
            .replace('{' + 'known_host_uuid' + '}', encodeURIComponent(String(knownHostUuid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling deleteRepositoryPipelineKnownHost.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling deleteRepositoryPipelineKnownHost.');
        }

        // verify required parameter 'knownHostUuid' is not null or undefined
        if (knownHostUuid === null || knownHostUuid === undefined) {
            throw new Error('Required parameter knownHostUuid was null or undefined when calling deleteRepositoryPipelineKnownHost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Delete a schedule.
     * @param username The account.
     * @param repoSlug The repository.
     * @param scheduleUuid The uuid of the schedule.
     */
    public async deleteRepositoryPipelineSchedule (username: string, repoSlug: string, scheduleUuid: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/repositories/{workspace}/{repo_slug}/pipelines_config/schedules/{schedule_uuid}'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)))
            .replace('{' + 'schedule_uuid' + '}', encodeURIComponent(String(scheduleUuid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling deleteRepositoryPipelineSchedule.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling deleteRepositoryPipelineSchedule.');
        }

        // verify required parameter 'scheduleUuid' is not null or undefined
        if (scheduleUuid === null || scheduleUuid === undefined) {
            throw new Error('Required parameter scheduleUuid was null or undefined when calling deleteRepositoryPipelineSchedule.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Delete a repository level variable.
     * @param username The account.
     * @param repoSlug The repository.
     * @param variableUuid The UUID of the variable to delete.
     */
    public async deleteRepositoryPipelineVariable (username: string, repoSlug: string, variableUuid: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/repositories/{workspace}/{repo_slug}/pipelines_config/variables/{variable_uuid}'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)))
            .replace('{' + 'variable_uuid' + '}', encodeURIComponent(String(variableUuid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling deleteRepositoryPipelineVariable.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling deleteRepositoryPipelineVariable.');
        }

        // verify required parameter 'variableUuid' is not null or undefined
        if (variableUuid === null || variableUuid === undefined) {
            throw new Error('Required parameter variableUuid was null or undefined when calling deleteRepositoryPipelineVariable.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Retrieve a specified pipeline
     * @param username The account.
     * @param repoSlug The repository.
     * @param pipelineUuid The pipeline UUID.
     */
    public async getPipelineForRepository (username: string, repoSlug: string, pipelineUuid: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Pipeline;  }> {
        const localVarPath = this.basePath + '/repositories/{workspace}/{repo_slug}/pipelines/{pipeline_uuid}'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)))
            .replace('{' + 'pipeline_uuid' + '}', encodeURIComponent(String(pipelineUuid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling getPipelineForRepository.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling getPipelineForRepository.');
        }

        // verify required parameter 'pipelineUuid' is not null or undefined
        if (pipelineUuid === null || pipelineUuid === undefined) {
            throw new Error('Required parameter pipelineUuid was null or undefined when calling getPipelineForRepository.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: Pipeline;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "Pipeline");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Retrieve a given step of a pipeline.
     * @param username The account.
     * @param repoSlug The repository.
     * @param pipelineUuid The UUID of the pipeline.
     * @param stepUuid The UUID of the step.
     */
    public async getPipelineStepForRepository (username: string, repoSlug: string, pipelineUuid: string, stepUuid: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PipelineStep;  }> {
        const localVarPath = this.basePath + '/repositories/{workspace}/{repo_slug}/pipelines/{pipeline_uuid}/steps/{step_uuid}'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)))
            .replace('{' + 'pipeline_uuid' + '}', encodeURIComponent(String(pipelineUuid)))
            .replace('{' + 'step_uuid' + '}', encodeURIComponent(String(stepUuid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling getPipelineStepForRepository.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling getPipelineStepForRepository.');
        }

        // verify required parameter 'pipelineUuid' is not null or undefined
        if (pipelineUuid === null || pipelineUuid === undefined) {
            throw new Error('Required parameter pipelineUuid was null or undefined when calling getPipelineStepForRepository.');
        }

        // verify required parameter 'stepUuid' is not null or undefined
        if (stepUuid === null || stepUuid === undefined) {
            throw new Error('Required parameter stepUuid was null or undefined when calling getPipelineStepForRepository.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: PipelineStep;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "PipelineStep");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Retrieve the log file for a given step of a pipeline.  This endpoint supports (and encourages!) the use of [HTTP Range requests](https://tools.ietf.org/html/rfc7233) to deal with potentially very large log files.
     * @param username The account.
     * @param repoSlug The repository.
     * @param pipelineUuid The UUID of the pipeline.
     * @param stepUuid The UUID of the step.
     */
    public async getPipelineStepLogForRepository (username: string, repoSlug: string, pipelineUuid: string, stepUuid: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/repositories/{workspace}/{repo_slug}/pipelines/{pipeline_uuid}/steps/{step_uuid}/log'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)))
            .replace('{' + 'pipeline_uuid' + '}', encodeURIComponent(String(pipelineUuid)))
            .replace('{' + 'step_uuid' + '}', encodeURIComponent(String(stepUuid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling getPipelineStepLogForRepository.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling getPipelineStepLogForRepository.');
        }

        // verify required parameter 'pipelineUuid' is not null or undefined
        if (pipelineUuid === null || pipelineUuid === undefined) {
            throw new Error('Required parameter pipelineUuid was null or undefined when calling getPipelineStepLogForRepository.');
        }

        // verify required parameter 'stepUuid' is not null or undefined
        if (stepUuid === null || stepUuid === undefined) {
            throw new Error('Required parameter stepUuid was null or undefined when calling getPipelineStepLogForRepository.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Find steps for the given pipeline.
     * @param username The account.
     * @param repoSlug The repository.
     * @param pipelineUuid The UUID of the pipeline.
     */
    public async getPipelineStepsForRepository (username: string, repoSlug: string, pipelineUuid: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PaginatedPipelineSteps;  }> {
        const localVarPath = this.basePath + '/repositories/{workspace}/{repo_slug}/pipelines/{pipeline_uuid}/steps/'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)))
            .replace('{' + 'pipeline_uuid' + '}', encodeURIComponent(String(pipelineUuid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling getPipelineStepsForRepository.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling getPipelineStepsForRepository.');
        }

        // verify required parameter 'pipelineUuid' is not null or undefined
        if (pipelineUuid === null || pipelineUuid === undefined) {
            throw new Error('Required parameter pipelineUuid was null or undefined when calling getPipelineStepsForRepository.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: PaginatedPipelineSteps;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "PaginatedPipelineSteps");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Retrieve a team level variable.
     * @param username The account.
     * @param variableUuid The UUID of the variable to retrieve.
     */
    public async getPipelineVariableForTeam (username: string, variableUuid: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PipelineVariable;  }> {
        const localVarPath = this.basePath + '/teams/{username}/pipelines_config/variables/{variable_uuid}'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'variable_uuid' + '}', encodeURIComponent(String(variableUuid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling getPipelineVariableForTeam.');
        }

        // verify required parameter 'variableUuid' is not null or undefined
        if (variableUuid === null || variableUuid === undefined) {
            throw new Error('Required parameter variableUuid was null or undefined when calling getPipelineVariableForTeam.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: PipelineVariable;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "PipelineVariable");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Retrieve a user level variable.
     * @param username The account.
     * @param variableUuid The UUID of the variable to retrieve.
     */
    public async getPipelineVariableForUser (username: string, variableUuid: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PipelineVariable;  }> {
        const localVarPath = this.basePath + '/users/{username}/pipelines_config/variables/{variable_uuid}'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'variable_uuid' + '}', encodeURIComponent(String(variableUuid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling getPipelineVariableForUser.');
        }

        // verify required parameter 'variableUuid' is not null or undefined
        if (variableUuid === null || variableUuid === undefined) {
            throw new Error('Required parameter variableUuid was null or undefined when calling getPipelineVariableForUser.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: PipelineVariable;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "PipelineVariable");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Find account level variables.
     * @param username The account.
     */
    public async getPipelineVariablesForTeam (username: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PaginatedPipelineVariables;  }> {
        const localVarPath = this.basePath + '/teams/{username}/pipelines_config/variables/'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling getPipelineVariablesForTeam.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: PaginatedPipelineVariables;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "PaginatedPipelineVariables");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Find user level variables.
     * @param username The account.
     */
    public async getPipelineVariablesForUser (username: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PaginatedPipelineVariables;  }> {
        const localVarPath = this.basePath + '/users/{username}/pipelines_config/variables/'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling getPipelineVariablesForUser.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: PaginatedPipelineVariables;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "PaginatedPipelineVariables");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Find pipelines
     * @param username The account.
     * @param repoSlug The repository.
     */
    public async getPipelinesForRepository (username: string, repoSlug: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PaginatedPipelines;  }> {
        const localVarPath = this.basePath + '/repositories/{workspace}/{repo_slug}/pipelines/'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling getPipelinesForRepository.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling getPipelinesForRepository.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: PaginatedPipelines;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "PaginatedPipelines");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Retrieve the repository pipelines configuration.
     * @param username The account.
     * @param repoSlug The repository.
     */
    public async getRepositoryPipelineConfig (username: string, repoSlug: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PipelinesConfig;  }> {
        const localVarPath = this.basePath + '/repositories/{workspace}/{repo_slug}/pipelines_config'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling getRepositoryPipelineConfig.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling getRepositoryPipelineConfig.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: PipelinesConfig;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "PipelinesConfig");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Retrieve a repository level known host.
     * @param username The account.
     * @param repoSlug The repository.
     * @param knownHostUuid The UUID of the known host to retrieve.
     */
    public async getRepositoryPipelineKnownHost (username: string, repoSlug: string, knownHostUuid: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PipelineKnownHost;  }> {
        const localVarPath = this.basePath + '/repositories/{workspace}/{repo_slug}/pipelines_config/ssh/known_hosts/{known_host_uuid}'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)))
            .replace('{' + 'known_host_uuid' + '}', encodeURIComponent(String(knownHostUuid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling getRepositoryPipelineKnownHost.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling getRepositoryPipelineKnownHost.');
        }

        // verify required parameter 'knownHostUuid' is not null or undefined
        if (knownHostUuid === null || knownHostUuid === undefined) {
            throw new Error('Required parameter knownHostUuid was null or undefined when calling getRepositoryPipelineKnownHost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: PipelineKnownHost;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "PipelineKnownHost");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Find repository level known hosts.
     * @param username The account.
     * @param repoSlug The repository.
     */
    public async getRepositoryPipelineKnownHosts (username: string, repoSlug: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PaginatedPipelineKnownHosts;  }> {
        const localVarPath = this.basePath + '/repositories/{workspace}/{repo_slug}/pipelines_config/ssh/known_hosts/'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling getRepositoryPipelineKnownHosts.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling getRepositoryPipelineKnownHosts.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: PaginatedPipelineKnownHosts;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "PaginatedPipelineKnownHosts");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Retrieve a schedule by its UUID.
     * @param username The account.
     * @param repoSlug The repository.
     * @param scheduleUuid The uuid of the schedule.
     */
    public async getRepositoryPipelineSchedule (username: string, repoSlug: string, scheduleUuid: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PipelineSchedule;  }> {
        const localVarPath = this.basePath + '/repositories/{workspace}/{repo_slug}/pipelines_config/schedules/{schedule_uuid}'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)))
            .replace('{' + 'schedule_uuid' + '}', encodeURIComponent(String(scheduleUuid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling getRepositoryPipelineSchedule.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling getRepositoryPipelineSchedule.');
        }

        // verify required parameter 'scheduleUuid' is not null or undefined
        if (scheduleUuid === null || scheduleUuid === undefined) {
            throw new Error('Required parameter scheduleUuid was null or undefined when calling getRepositoryPipelineSchedule.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: PipelineSchedule;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "PipelineSchedule");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Retrieve the executions of a given schedule.
     * @param username The account.
     * @param repoSlug The repository.
     */
    public async getRepositoryPipelineScheduleExecutions (username: string, repoSlug: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PaginatedPipelineScheduleExecutions;  }> {
        const localVarPath = this.basePath + '/repositories/{workspace}/{repo_slug}/pipelines_config/schedules/{schedule_uuid}/executions/'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling getRepositoryPipelineScheduleExecutions.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling getRepositoryPipelineScheduleExecutions.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: PaginatedPipelineScheduleExecutions;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "PaginatedPipelineScheduleExecutions");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Retrieve the configured schedules for the given repository.
     * @param username The account.
     * @param repoSlug The repository.
     */
    public async getRepositoryPipelineSchedules (username: string, repoSlug: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PaginatedPipelineSchedules;  }> {
        const localVarPath = this.basePath + '/repositories/{workspace}/{repo_slug}/pipelines_config/schedules/'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling getRepositoryPipelineSchedules.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling getRepositoryPipelineSchedules.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: PaginatedPipelineSchedules;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "PaginatedPipelineSchedules");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Retrieve the repository SSH key pair excluding the SSH private key. The private key is a write only field and will never be exposed in the logs or the REST API.
     * @param username The account.
     * @param repoSlug The repository.
     */
    public async getRepositoryPipelineSshKeyPair (username: string, repoSlug: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PipelineSshKeyPair;  }> {
        const localVarPath = this.basePath + '/repositories/{workspace}/{repo_slug}/pipelines_config/ssh/key_pair'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling getRepositoryPipelineSshKeyPair.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling getRepositoryPipelineSshKeyPair.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: PipelineSshKeyPair;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "PipelineSshKeyPair");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Retrieve a repository level variable.
     * @param username The account.
     * @param repoSlug The repository.
     * @param variableUuid The UUID of the variable to retrieve.
     */
    public async getRepositoryPipelineVariable (username: string, repoSlug: string, variableUuid: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PipelineVariable;  }> {
        const localVarPath = this.basePath + '/repositories/{workspace}/{repo_slug}/pipelines_config/variables/{variable_uuid}'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)))
            .replace('{' + 'variable_uuid' + '}', encodeURIComponent(String(variableUuid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling getRepositoryPipelineVariable.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling getRepositoryPipelineVariable.');
        }

        // verify required parameter 'variableUuid' is not null or undefined
        if (variableUuid === null || variableUuid === undefined) {
            throw new Error('Required parameter variableUuid was null or undefined when calling getRepositoryPipelineVariable.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: PipelineVariable;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "PipelineVariable");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Find repository level variables.
     * @param username The account.
     * @param repoSlug The repository.
     */
    public async getRepositoryPipelineVariables (username: string, repoSlug: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PaginatedPipelineVariables;  }> {
        const localVarPath = this.basePath + '/repositories/{workspace}/{repo_slug}/pipelines_config/variables/'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling getRepositoryPipelineVariables.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling getRepositoryPipelineVariables.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: PaginatedPipelineVariables;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "PaginatedPipelineVariables");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Signal the stop of a pipeline and all of its steps that not have completed yet.
     * @param username The account.
     * @param repoSlug The repository.
     * @param pipelineUuid The UUID of the pipeline.
     */
    public async stopPipeline (username: string, repoSlug: string, pipelineUuid: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/repositories/{workspace}/{repo_slug}/pipelines/{pipeline_uuid}/stopPipeline'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)))
            .replace('{' + 'pipeline_uuid' + '}', encodeURIComponent(String(pipelineUuid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling stopPipeline.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling stopPipeline.');
        }

        // verify required parameter 'pipelineUuid' is not null or undefined
        if (pipelineUuid === null || pipelineUuid === undefined) {
            throw new Error('Required parameter pipelineUuid was null or undefined when calling stopPipeline.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Update a team level variable.
     * @param username The account.
     * @param variableUuid The UUID of the variable.
     * @param body The updated variable.
     */
    public async updatePipelineVariableForTeam (username: string, variableUuid: string, body: PipelineVariable, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PipelineVariable;  }> {
        const localVarPath = this.basePath + '/teams/{username}/pipelines_config/variables/{variable_uuid}'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'variable_uuid' + '}', encodeURIComponent(String(variableUuid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling updatePipelineVariableForTeam.');
        }

        // verify required parameter 'variableUuid' is not null or undefined
        if (variableUuid === null || variableUuid === undefined) {
            throw new Error('Required parameter variableUuid was null or undefined when calling updatePipelineVariableForTeam.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updatePipelineVariableForTeam.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "PipelineVariable")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: PipelineVariable;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "PipelineVariable");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Update a user level variable.
     * @param username The account.
     * @param variableUuid The UUID of the variable.
     * @param body The updated variable.
     */
    public async updatePipelineVariableForUser (username: string, variableUuid: string, body: PipelineVariable, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PipelineVariable;  }> {
        const localVarPath = this.basePath + '/users/{username}/pipelines_config/variables/{variable_uuid}'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'variable_uuid' + '}', encodeURIComponent(String(variableUuid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling updatePipelineVariableForUser.');
        }

        // verify required parameter 'variableUuid' is not null or undefined
        if (variableUuid === null || variableUuid === undefined) {
            throw new Error('Required parameter variableUuid was null or undefined when calling updatePipelineVariableForUser.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updatePipelineVariableForUser.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "PipelineVariable")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: PipelineVariable;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "PipelineVariable");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Update the next build number that should be assigned to a pipeline. The next build number that will be configured has to be strictly higher than the current latest build number for this repository.
     * @param username The account.
     * @param repoSlug The repository.
     * @param body The build number to update.
     */
    public async updateRepositoryBuildNumber (username: string, repoSlug: string, body: PipelineBuildNumber, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PipelineBuildNumber;  }> {
        const localVarPath = this.basePath + '/repositories/{workspace}/{repo_slug}/pipelines_config/build_number'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling updateRepositoryBuildNumber.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling updateRepositoryBuildNumber.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateRepositoryBuildNumber.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "PipelineBuildNumber")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: PipelineBuildNumber;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "PipelineBuildNumber");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Update the pipelines configuration for a repository.
     * @param username The account.
     * @param repoSlug The repository.
     * @param body The updated repository pipelines configuration.
     */
    public async updateRepositoryPipelineConfig (username: string, repoSlug: string, body: PipelinesConfig, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PipelinesConfig;  }> {
        const localVarPath = this.basePath + '/repositories/{workspace}/{repo_slug}/pipelines_config'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling updateRepositoryPipelineConfig.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling updateRepositoryPipelineConfig.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateRepositoryPipelineConfig.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "PipelinesConfig")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: PipelinesConfig;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "PipelinesConfig");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Create or update the repository SSH key pair. The private key will be set as a default SSH identity in your build container.
     * @param username The account.
     * @param repoSlug The repository.
     * @param body The created or updated SSH key pair.
     */
    public async updateRepositoryPipelineKeyPair (username: string, repoSlug: string, body: PipelineSshKeyPair, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PipelineSshKeyPair;  }> {
        const localVarPath = this.basePath + '/repositories/{workspace}/{repo_slug}/pipelines_config/ssh/key_pair'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling updateRepositoryPipelineKeyPair.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling updateRepositoryPipelineKeyPair.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateRepositoryPipelineKeyPair.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "PipelineSshKeyPair")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: PipelineSshKeyPair;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "PipelineSshKeyPair");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Update a repository level known host.
     * @param username The account.
     * @param repoSlug The repository.
     * @param knownHostUuid The UUID of the known host to update.
     * @param body The updated known host.
     */
    public async updateRepositoryPipelineKnownHost (username: string, repoSlug: string, knownHostUuid: string, body: PipelineKnownHost, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PipelineKnownHost;  }> {
        const localVarPath = this.basePath + '/repositories/{workspace}/{repo_slug}/pipelines_config/ssh/known_hosts/{known_host_uuid}'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)))
            .replace('{' + 'known_host_uuid' + '}', encodeURIComponent(String(knownHostUuid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling updateRepositoryPipelineKnownHost.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling updateRepositoryPipelineKnownHost.');
        }

        // verify required parameter 'knownHostUuid' is not null or undefined
        if (knownHostUuid === null || knownHostUuid === undefined) {
            throw new Error('Required parameter knownHostUuid was null or undefined when calling updateRepositoryPipelineKnownHost.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateRepositoryPipelineKnownHost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "PipelineKnownHost")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: PipelineKnownHost;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "PipelineKnownHost");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Update a schedule.
     * @param username The account.
     * @param repoSlug The repository.
     * @param scheduleUuid The uuid of the schedule.
     * @param body The schedule to update.
     */
    public async updateRepositoryPipelineSchedule (username: string, repoSlug: string, scheduleUuid: string, body: PipelineSchedule, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PipelineSchedule;  }> {
        const localVarPath = this.basePath + '/repositories/{workspace}/{repo_slug}/pipelines_config/schedules/{schedule_uuid}'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)))
            .replace('{' + 'schedule_uuid' + '}', encodeURIComponent(String(scheduleUuid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling updateRepositoryPipelineSchedule.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling updateRepositoryPipelineSchedule.');
        }

        // verify required parameter 'scheduleUuid' is not null or undefined
        if (scheduleUuid === null || scheduleUuid === undefined) {
            throw new Error('Required parameter scheduleUuid was null or undefined when calling updateRepositoryPipelineSchedule.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateRepositoryPipelineSchedule.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "PipelineSchedule")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: PipelineSchedule;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "PipelineSchedule");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Update a repository level variable.
     * @param username The account.
     * @param repoSlug The repository.
     * @param variableUuid The UUID of the variable to update.
     * @param body The updated variable
     */
    public async updateRepositoryPipelineVariable (username: string, repoSlug: string, variableUuid: string, body: PipelineVariable, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PipelineVariable;  }> {
        const localVarPath = this.basePath + '/repositories/{workspace}/{repo_slug}/pipelines_config/variables/{variable_uuid}'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)))
            .replace('{' + 'variable_uuid' + '}', encodeURIComponent(String(variableUuid)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling updateRepositoryPipelineVariable.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling updateRepositoryPipelineVariable.');
        }

        // verify required parameter 'variableUuid' is not null or undefined
        if (variableUuid === null || variableUuid === undefined) {
            throw new Error('Required parameter variableUuid was null or undefined when calling updateRepositoryPipelineVariable.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateRepositoryPipelineVariable.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "PipelineVariable")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: PipelineVariable;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "PipelineVariable");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
}
