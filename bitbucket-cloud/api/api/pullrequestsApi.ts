/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import localVarRequest = require('request');
import http = require('http');

/* tslint:disable:no-unused-locals */
import { PaginatedCommitstatuses } from '../model/paginatedCommitstatuses';
import { PaginatedPullrequestComments } from '../model/paginatedPullrequestComments';
import { PaginatedPullrequests } from '../model/paginatedPullrequests';
import { Participant } from '../model/participant';
import { Pullrequest } from '../model/pullrequest';
import { PullrequestComment } from '../model/pullrequestComment';
import { PullrequestMergeParameters } from '../model/pullrequestMergeParameters';

import { ObjectSerializer, Authentication, VoidAuth } from '../model/models';
import { ApiKeyAuth } from '../model/models';
import { HttpBasicAuth } from '../model/models';
import { OAuth } from '../model/models';

let defaultBasePath = 'https://api.bitbucket.org/2.0';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum PullrequestsApiApiKeys {
    api_key,
}

export class PullrequestsApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'api_key': new ApiKeyAuth('header', 'Authorization'),
        'basic': new HttpBasicAuth(),
        'oauth2': new OAuth(),
    }

    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            this.username = basePathOrUsername;
            this.password = password
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: PullrequestsApiApiKeys, value: string) {
        (this.authentications as any)[PullrequestsApiApiKeys[key]].apiKey = value;
    }
    set username(username: string) {
        this.authentications.basic.username = username;
    }

    set password(password: string) {
        this.authentications.basic.password = password;
    }

    set accessToken(token: string) {
        this.authentications.oauth2.accessToken = token;
    }

    /**
     * 
     * @summary Returns a paginated list of all pull requests as part of which this commit was reviewed.
     * @param username The account; either the UUID in curly braces, or the account_id
     * @param repoSlug The repository; either the UUID in curly braces, or the slug
     * @param commit The SHA1 of the commit
     * @param page Which page to retrieve
     * @param pagelen How many pull requests to retrieve per page
     */
    public async getPullrequestsForCommit (username: string, repoSlug: string, commit: string, page?: number, pagelen?: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PaginatedPullrequests;  }> {
        const localVarPath = this.basePath + '/repositories/{workspace}/{repo_slug}/commit/{commit}/pullrequests'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)))
            .replace('{' + 'commit' + '}', encodeURIComponent(String(commit)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling getPullrequestsForCommit.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling getPullrequestsForCommit.');
        }

        // verify required parameter 'commit' is not null or undefined
        if (commit === null || commit === undefined) {
            throw new Error('Required parameter commit was null or undefined when calling getPullrequestsForCommit.');
        }

        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }

        if (pagelen !== undefined) {
            localVarQueryParameters['pagelen'] = ObjectSerializer.serialize(pagelen, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: PaginatedPullrequests;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "PaginatedPullrequests");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns all pull requests authored by the specified user.  By default only open pull requests are returned. This can be controlled using the `state` query parameter. To retrieve pull requests that are in one of multiple states, repeat the `state` parameter for each individual state.  This endpoint also supports filtering and sorting of the results. See [filtering and sorting](../../../../meta/filtering) for more details.
     * @param targetUser 
     * @param username This can either be the username or the UUID of the account, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. An account is either a team or user. 
     * @param state Only return pull requests that are in this state. This parameter can be repeated.
     */
    public async pullrequestsTargetUserGet (targetUser: string, username: string, state?: 'MERGED' | 'SUPERSEDED' | 'OPEN' | 'DECLINED', options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PaginatedPullrequests;  }> {
        const localVarPath = this.basePath + '/pullrequests/{target_user}'
            .replace('{' + 'target_user' + '}', encodeURIComponent(String(targetUser)))
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'targetUser' is not null or undefined
        if (targetUser === null || targetUser === undefined) {
            throw new Error('Required parameter targetUser was null or undefined when calling pullrequestsTargetUserGet.');
        }

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling pullrequestsTargetUserGet.');
        }

        if (state !== undefined) {
            localVarQueryParameters['state'] = ObjectSerializer.serialize(state, "'MERGED' | 'SUPERSEDED' | 'OPEN' | 'DECLINED'");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.api_key.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.basic.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.oauth2.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: PaginatedPullrequests;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "PaginatedPullrequests");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns the repository\'s default reviewers.  These are the users that are automatically added as reviewers on every new pull request that is created.
     * @param username This can either be the username or the UUID of the account, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. An account is either a team or user. 
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
     */
    public async repositoriesUsernameRepoSlugDefaultReviewersGet (username: string, repoSlug: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/repositories/{username}/{repo_slug}/default-reviewers'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling repositoriesUsernameRepoSlugDefaultReviewersGet.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling repositoriesUsernameRepoSlugDefaultReviewersGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.api_key.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.basic.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.oauth2.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Removes a default reviewer from the repository.
     * @param username This can either be the username or the UUID of the account, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. An account is either a team or user. 
     * @param targetUsername This can either be the username or the UUID of the default reviewer, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. 
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
     */
    public async repositoriesUsernameRepoSlugDefaultReviewersTargetUsernameDelete (username: string, targetUsername: string, repoSlug: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Error;  }> {
        const localVarPath = this.basePath + '/repositories/{username}/{repo_slug}/default-reviewers/{target_username}'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'target_username' + '}', encodeURIComponent(String(targetUsername)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling repositoriesUsernameRepoSlugDefaultReviewersTargetUsernameDelete.');
        }

        // verify required parameter 'targetUsername' is not null or undefined
        if (targetUsername === null || targetUsername === undefined) {
            throw new Error('Required parameter targetUsername was null or undefined when calling repositoriesUsernameRepoSlugDefaultReviewersTargetUsernameDelete.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling repositoriesUsernameRepoSlugDefaultReviewersTargetUsernameDelete.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.api_key.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.basic.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.oauth2.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: Error;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "Error");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns the specified reviewer.  This can be used to test whether a user is among the repository\'s default reviewers list. A 404 indicates that that specified user is not a default reviewer.
     * @param username This can either be the username or the UUID of the account, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. An account is either a team or user. 
     * @param targetUsername This can either be the username or the UUID of the default reviewer, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. 
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
     */
    public async repositoriesUsernameRepoSlugDefaultReviewersTargetUsernameGet (username: string, targetUsername: string, repoSlug: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Error;  }> {
        const localVarPath = this.basePath + '/repositories/{username}/{repo_slug}/default-reviewers/{target_username}'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'target_username' + '}', encodeURIComponent(String(targetUsername)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling repositoriesUsernameRepoSlugDefaultReviewersTargetUsernameGet.');
        }

        // verify required parameter 'targetUsername' is not null or undefined
        if (targetUsername === null || targetUsername === undefined) {
            throw new Error('Required parameter targetUsername was null or undefined when calling repositoriesUsernameRepoSlugDefaultReviewersTargetUsernameGet.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling repositoriesUsernameRepoSlugDefaultReviewersTargetUsernameGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.api_key.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.basic.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.oauth2.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: Error;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "Error");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Adds the specified user to the repository\'s list of default reviewers.  This method is idempotent. Adding a user a second time has no effect.
     * @param username This can either be the username or the UUID of the account, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. An account is either a team or user. 
     * @param targetUsername This can either be the username or the UUID of the default reviewer, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. 
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
     */
    public async repositoriesUsernameRepoSlugDefaultReviewersTargetUsernamePut (username: string, targetUsername: string, repoSlug: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Error;  }> {
        const localVarPath = this.basePath + '/repositories/{username}/{repo_slug}/default-reviewers/{target_username}'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'target_username' + '}', encodeURIComponent(String(targetUsername)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling repositoriesUsernameRepoSlugDefaultReviewersTargetUsernamePut.');
        }

        // verify required parameter 'targetUsername' is not null or undefined
        if (targetUsername === null || targetUsername === undefined) {
            throw new Error('Required parameter targetUsername was null or undefined when calling repositoriesUsernameRepoSlugDefaultReviewersTargetUsernamePut.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling repositoriesUsernameRepoSlugDefaultReviewersTargetUsernamePut.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.api_key.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.basic.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.oauth2.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: Error;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "Error");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns a paginated list of the pull request\'s activity log.  This includes comments that were made by the reviewers, updates and approvals.
     * @param username This can either be the username or the UUID of the account, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. An account is either a team or user. 
     * @param pullRequestId The id of the pull request.
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
     */
    public async repositoriesUsernameRepoSlugPullrequestsActivityGet (username: string, pullRequestId: number, repoSlug: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/repositories/{username}/{repo_slug}/pullrequests/activity'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'pull_request_id' + '}', encodeURIComponent(String(pullRequestId)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsActivityGet.');
        }

        // verify required parameter 'pullRequestId' is not null or undefined
        if (pullRequestId === null || pullRequestId === undefined) {
            throw new Error('Required parameter pullRequestId was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsActivityGet.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsActivityGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.api_key.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.basic.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.oauth2.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns all pull requests on the specified repository.  By default only open pull requests are returned. This can be controlled using the `state` query parameter. To retrieve pull requests that are in one of multiple states, repeat the `state` parameter for each individual state.  This endpoint also supports filtering and sorting of the results. See [filtering and sorting](../../../../meta/filtering) for more details.
     * @param username This can either be the username or the UUID of the account, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. An account is either a team or user. 
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
     * @param state Only return pull requests that are in this state. This parameter can be repeated.
     */
    public async repositoriesUsernameRepoSlugPullrequestsGet (username: string, repoSlug: string, state?: 'MERGED' | 'SUPERSEDED' | 'OPEN' | 'DECLINED', options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PaginatedPullrequests;  }> {
        const localVarPath = this.basePath + '/repositories/{username}/{repo_slug}/pullrequests'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsGet.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsGet.');
        }

        if (state !== undefined) {
            localVarQueryParameters['state'] = ObjectSerializer.serialize(state, "'MERGED' | 'SUPERSEDED' | 'OPEN' | 'DECLINED'");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.api_key.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.basic.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.oauth2.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: PaginatedPullrequests;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "PaginatedPullrequests");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Creates a new pull request where the destination repository is this repository and the author is the authenticated user.  The minimum required fields to create a pull request are `title` and `source`, specified by a branch name.  ``` curl https://api.bitbucket.org/2.0/repositories/my-username/my-repository/pullrequests \\     -u my-username:my-password \\     --request POST \\     --header \'Content-Type: application/json\' \\     --data \'{         \"title\": \"My Title\",         \"source\": {             \"branch\": {                 \"name\": \"staging\"             }         }     }\' ```  If the pull request\'s `destination` is not specified, it will default to the `repository.mainbranch`. To open a pull request to a different branch, say from a feature branch to a staging branch, specify a `destination` (same format as the `source`):  ``` {     \"title\": \"My Title\",     \"source\": {         \"branch\": {             \"name\": \"my-feature-branch\"         }     },     \"destination\": {         \"branch\": {             \"name\": \"staging\"         }     } } ```  Reviewers can be specified by adding an array of user objects as the `reviewers` property.  ``` {     \"title\": \"My Title\",     \"source\": {         \"branch\": {             \"name\": \"my-feature-branch\"         }     },     \"reviewers\": [         {             \"uuid\": \"{504c3b62-8120-4f0c-a7bc-87800b9d6f70}\"         }     ] } ```  Other fields:  * `description` - a string * `close_source_branch` - boolean that specifies if the source branch should be closed upon merging
     * @param username This can either be the username or the UUID of the account, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. An account is either a team or user. 
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
     * @param body The new pull request.  The request URL you POST to becomes the destination repository URL. For this reason, you must specify an explicit source repository in the request object if you want to pull from a different repository (fork).  Since not all elements are required or even mutable, you only need to include the elements you want to initialize, such as the source branch and the title.
     */
    public async repositoriesUsernameRepoSlugPullrequestsPost (username: string, repoSlug: string, body?: Pullrequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Pullrequest;  }> {
        const localVarPath = this.basePath + '/repositories/{username}/{repo_slug}/pullrequests'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPost.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "Pullrequest")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.api_key.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.basic.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.oauth2.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: Pullrequest;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "Pullrequest");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns a paginated list of the pull request\'s activity log.  This includes comments that were made by the reviewers, updates and approvals.
     * @param username This can either be the username or the UUID of the account, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. An account is either a team or user. 
     * @param pullRequestId The id of the pull request.
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
     */
    public async repositoriesUsernameRepoSlugPullrequestsPullRequestIdActivityGet (username: string, pullRequestId: number, repoSlug: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/activity'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'pull_request_id' + '}', encodeURIComponent(String(pullRequestId)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdActivityGet.');
        }

        // verify required parameter 'pullRequestId' is not null or undefined
        if (pullRequestId === null || pullRequestId === undefined) {
            throw new Error('Required parameter pullRequestId was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdActivityGet.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdActivityGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.api_key.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.basic.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.oauth2.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Redact the authenticated user\'s approval of the specified pull request.
     * @param username 
     * @param pullRequestId 
     * @param repoSlug 
     */
    public async repositoriesUsernameRepoSlugPullrequestsPullRequestIdApproveDelete (username: string, pullRequestId: string, repoSlug: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/approve'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'pull_request_id' + '}', encodeURIComponent(String(pullRequestId)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdApproveDelete.');
        }

        // verify required parameter 'pullRequestId' is not null or undefined
        if (pullRequestId === null || pullRequestId === undefined) {
            throw new Error('Required parameter pullRequestId was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdApproveDelete.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdApproveDelete.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.api_key.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.basic.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.oauth2.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Approve the specified pull request as the authenticated user.
     * @param username 
     * @param pullRequestId 
     * @param repoSlug 
     */
    public async repositoriesUsernameRepoSlugPullrequestsPullRequestIdApprovePost (username: string, pullRequestId: string, repoSlug: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Participant;  }> {
        const localVarPath = this.basePath + '/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/approve'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'pull_request_id' + '}', encodeURIComponent(String(pullRequestId)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdApprovePost.');
        }

        // verify required parameter 'pullRequestId' is not null or undefined
        if (pullRequestId === null || pullRequestId === undefined) {
            throw new Error('Required parameter pullRequestId was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdApprovePost.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdApprovePost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.api_key.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.basic.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.oauth2.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: Participant;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "Participant");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Deletes a specific pull request comment.
     * @param username 
     * @param pullRequestId 
     * @param commentId 
     * @param repoSlug 
     */
    public async repositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsCommentIdDelete (username: string, pullRequestId: string, commentId: string, repoSlug: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/comments/{comment_id}'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'pull_request_id' + '}', encodeURIComponent(String(pullRequestId)))
            .replace('{' + 'comment_id' + '}', encodeURIComponent(String(commentId)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsCommentIdDelete.');
        }

        // verify required parameter 'pullRequestId' is not null or undefined
        if (pullRequestId === null || pullRequestId === undefined) {
            throw new Error('Required parameter pullRequestId was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsCommentIdDelete.');
        }

        // verify required parameter 'commentId' is not null or undefined
        if (commentId === null || commentId === undefined) {
            throw new Error('Required parameter commentId was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsCommentIdDelete.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsCommentIdDelete.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.api_key.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.basic.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.oauth2.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns a specific pull request comment.
     * @param username 
     * @param pullRequestId 
     * @param commentId 
     * @param repoSlug 
     */
    public async repositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsCommentIdGet (username: string, pullRequestId: string, commentId: string, repoSlug: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PullrequestComment;  }> {
        const localVarPath = this.basePath + '/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/comments/{comment_id}'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'pull_request_id' + '}', encodeURIComponent(String(pullRequestId)))
            .replace('{' + 'comment_id' + '}', encodeURIComponent(String(commentId)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsCommentIdGet.');
        }

        // verify required parameter 'pullRequestId' is not null or undefined
        if (pullRequestId === null || pullRequestId === undefined) {
            throw new Error('Required parameter pullRequestId was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsCommentIdGet.');
        }

        // verify required parameter 'commentId' is not null or undefined
        if (commentId === null || commentId === undefined) {
            throw new Error('Required parameter commentId was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsCommentIdGet.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsCommentIdGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.api_key.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.basic.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.oauth2.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: PullrequestComment;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "PullrequestComment");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Updates a specific pull request comment.
     * @param username 
     * @param pullRequestId 
     * @param commentId 
     * @param repoSlug 
     * @param body The contents of the updated comment.
     */
    public async repositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsCommentIdPut (username: string, pullRequestId: string, commentId: string, repoSlug: string, body: PullrequestComment, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PullrequestComment;  }> {
        const localVarPath = this.basePath + '/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/comments/{comment_id}'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'pull_request_id' + '}', encodeURIComponent(String(pullRequestId)))
            .replace('{' + 'comment_id' + '}', encodeURIComponent(String(commentId)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsCommentIdPut.');
        }

        // verify required parameter 'pullRequestId' is not null or undefined
        if (pullRequestId === null || pullRequestId === undefined) {
            throw new Error('Required parameter pullRequestId was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsCommentIdPut.');
        }

        // verify required parameter 'commentId' is not null or undefined
        if (commentId === null || commentId === undefined) {
            throw new Error('Required parameter commentId was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsCommentIdPut.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsCommentIdPut.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsCommentIdPut.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "PullrequestComment")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.api_key.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.basic.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.oauth2.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: PullrequestComment;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "PullrequestComment");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns a paginated list of the pull request\'s comments.  This includes both global, inline comments and replies.  The default sorting is oldest to newest and can be overridden with the `sort` query parameter.  This endpoint also supports filtering and sorting of the results. See [filtering and sorting](../../../../../../meta/filtering) for more details.
     * @param username This can either be the username or the UUID of the account, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. An account is either a team or user. 
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
     * @param pullRequestId The id of the pull request.
     */
    public async repositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsGet (username: string, repoSlug: string, pullRequestId: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PaginatedPullrequestComments;  }> {
        const localVarPath = this.basePath + '/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/comments'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)))
            .replace('{' + 'pull_request_id' + '}', encodeURIComponent(String(pullRequestId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsGet.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsGet.');
        }

        // verify required parameter 'pullRequestId' is not null or undefined
        if (pullRequestId === null || pullRequestId === undefined) {
            throw new Error('Required parameter pullRequestId was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.api_key.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.basic.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.oauth2.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: PaginatedPullrequestComments;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "PaginatedPullrequestComments");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Creates a new pull request comment.  Returns the newly created pull request comment.
     * @param username This can either be the username or the UUID of the account, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. An account is either a team or user. 
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
     * @param pullRequestId The id of the pull request.
     * @param body The comment object.
     */
    public async repositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsPost (username: string, repoSlug: string, pullRequestId: number, body: PullrequestComment, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PullrequestComment;  }> {
        const localVarPath = this.basePath + '/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/comments'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)))
            .replace('{' + 'pull_request_id' + '}', encodeURIComponent(String(pullRequestId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsPost.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsPost.');
        }

        // verify required parameter 'pullRequestId' is not null or undefined
        if (pullRequestId === null || pullRequestId === undefined) {
            throw new Error('Required parameter pullRequestId was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsPost.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsPost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "PullrequestComment")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.api_key.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.basic.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.oauth2.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: PullrequestComment;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "PullrequestComment");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns a paginated list of the pull request\'s commits.  These are the commits that are being merged into the destination branch when the pull requests gets accepted.
     * @param username 
     * @param pullRequestId 
     * @param repoSlug 
     */
    public async repositoriesUsernameRepoSlugPullrequestsPullRequestIdCommitsGet (username: string, pullRequestId: string, repoSlug: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Error;  }> {
        const localVarPath = this.basePath + '/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/commits'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'pull_request_id' + '}', encodeURIComponent(String(pullRequestId)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdCommitsGet.');
        }

        // verify required parameter 'pullRequestId' is not null or undefined
        if (pullRequestId === null || pullRequestId === undefined) {
            throw new Error('Required parameter pullRequestId was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdCommitsGet.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdCommitsGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.api_key.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.basic.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.oauth2.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: Error;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "Error");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Declines the pull request.
     * @param username 
     * @param pullRequestId 
     * @param repoSlug 
     */
    public async repositoriesUsernameRepoSlugPullrequestsPullRequestIdDeclinePost (username: string, pullRequestId: string, repoSlug: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Pullrequest;  }> {
        const localVarPath = this.basePath + '/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/decline'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'pull_request_id' + '}', encodeURIComponent(String(pullRequestId)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdDeclinePost.');
        }

        // verify required parameter 'pullRequestId' is not null or undefined
        if (pullRequestId === null || pullRequestId === undefined) {
            throw new Error('Required parameter pullRequestId was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdDeclinePost.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdDeclinePost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.api_key.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.basic.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.oauth2.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: Pullrequest;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "Pullrequest");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Redirects to the [repository diff](../../diff/%7Bspec%7D) with the revspec that corresponds to the pull request.
     * @param username 
     * @param pullRequestId 
     * @param repoSlug 
     */
    public async repositoriesUsernameRepoSlugPullrequestsPullRequestIdDiffGet (username: string, pullRequestId: string, repoSlug: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/diff'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'pull_request_id' + '}', encodeURIComponent(String(pullRequestId)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdDiffGet.');
        }

        // verify required parameter 'pullRequestId' is not null or undefined
        if (pullRequestId === null || pullRequestId === undefined) {
            throw new Error('Required parameter pullRequestId was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdDiffGet.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdDiffGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.api_key.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.basic.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.oauth2.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Redirects to the [repository diffstat](../../diffstat/%7Bspec%7D) with the revspec that corresponds to the pull request.
     * @param username 
     * @param pullRequestId 
     * @param repoSlug 
     */
    public async repositoriesUsernameRepoSlugPullrequestsPullRequestIdDiffstatGet (username: string, pullRequestId: string, repoSlug: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/diffstat'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'pull_request_id' + '}', encodeURIComponent(String(pullRequestId)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdDiffstatGet.');
        }

        // verify required parameter 'pullRequestId' is not null or undefined
        if (pullRequestId === null || pullRequestId === undefined) {
            throw new Error('Required parameter pullRequestId was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdDiffstatGet.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdDiffstatGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.api_key.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.basic.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.oauth2.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns the specified pull request.
     * @param username This can either be the username or the UUID of the account, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. An account is either a team or user. 
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
     * @param pullRequestId The id of the pull request.
     */
    public async repositoriesUsernameRepoSlugPullrequestsPullRequestIdGet (username: string, repoSlug: string, pullRequestId: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Pullrequest;  }> {
        const localVarPath = this.basePath + '/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)))
            .replace('{' + 'pull_request_id' + '}', encodeURIComponent(String(pullRequestId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdGet.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdGet.');
        }

        // verify required parameter 'pullRequestId' is not null or undefined
        if (pullRequestId === null || pullRequestId === undefined) {
            throw new Error('Required parameter pullRequestId was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.api_key.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.basic.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.oauth2.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: Pullrequest;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "Pullrequest");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Merges the pull request.
     * @param username 
     * @param pullRequestId 
     * @param repoSlug 
     * @param body 
     */
    public async repositoriesUsernameRepoSlugPullrequestsPullRequestIdMergePost (username: string, pullRequestId: string, repoSlug: string, body?: PullrequestMergeParameters, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Pullrequest;  }> {
        const localVarPath = this.basePath + '/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/merge'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'pull_request_id' + '}', encodeURIComponent(String(pullRequestId)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdMergePost.');
        }

        // verify required parameter 'pullRequestId' is not null or undefined
        if (pullRequestId === null || pullRequestId === undefined) {
            throw new Error('Required parameter pullRequestId was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdMergePost.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdMergePost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "PullrequestMergeParameters")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.api_key.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.basic.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.oauth2.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: Pullrequest;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "Pullrequest");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param username 
     * @param pullRequestId 
     * @param repoSlug 
     */
    public async repositoriesUsernameRepoSlugPullrequestsPullRequestIdPatchGet (username: string, pullRequestId: string, repoSlug: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Error;  }> {
        const localVarPath = this.basePath + '/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/patch'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'pull_request_id' + '}', encodeURIComponent(String(pullRequestId)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdPatchGet.');
        }

        // verify required parameter 'pullRequestId' is not null or undefined
        if (pullRequestId === null || pullRequestId === undefined) {
            throw new Error('Required parameter pullRequestId was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdPatchGet.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdPatchGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.api_key.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.basic.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.oauth2.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: Error;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "Error");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Mutates the specified pull request.  This can be used to change the pull request\'s branches or description.  Only open pull requests can be mutated.
     * @param username This can either be the username or the UUID of the account, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. An account is either a team or user. 
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
     * @param pullRequestId The id of the pull request.
     * @param body The pull request that is to be updated.
     */
    public async repositoriesUsernameRepoSlugPullrequestsPullRequestIdPut (username: string, repoSlug: string, pullRequestId: number, body?: Pullrequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Pullrequest;  }> {
        const localVarPath = this.basePath + '/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)))
            .replace('{' + 'pull_request_id' + '}', encodeURIComponent(String(pullRequestId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdPut.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdPut.');
        }

        // verify required parameter 'pullRequestId' is not null or undefined
        if (pullRequestId === null || pullRequestId === undefined) {
            throw new Error('Required parameter pullRequestId was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdPut.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "Pullrequest")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.api_key.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.basic.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.oauth2.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: Pullrequest;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "Pullrequest");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns all statuses (e.g. build results) for the given pull request.
     * @param username This can either be the username or the UUID of the account, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. An account is either a team or user. 
     * @param pullRequestId The id of the pull request.
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
     */
    public async repositoriesUsernameRepoSlugPullrequestsPullRequestIdStatusesGet (username: string, pullRequestId: number, repoSlug: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PaginatedCommitstatuses;  }> {
        const localVarPath = this.basePath + '/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/statuses'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)))
            .replace('{' + 'pull_request_id' + '}', encodeURIComponent(String(pullRequestId)))
            .replace('{' + 'repo_slug' + '}', encodeURIComponent(String(repoSlug)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdStatusesGet.');
        }

        // verify required parameter 'pullRequestId' is not null or undefined
        if (pullRequestId === null || pullRequestId === undefined) {
            throw new Error('Required parameter pullRequestId was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdStatusesGet.');
        }

        // verify required parameter 'repoSlug' is not null or undefined
        if (repoSlug === null || repoSlug === undefined) {
            throw new Error('Required parameter repoSlug was null or undefined when calling repositoriesUsernameRepoSlugPullrequestsPullRequestIdStatusesGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.api_key.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.basic.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.oauth2.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: PaginatedCommitstatuses;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "PaginatedCommitstatuses");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
}
