/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { FilterSubscription } from './filterSubscription';
import { SharePermission } from './sharePermission';
import { User } from './user';

/**
* Details of a filter identified as part of a search.
*/
export class FoundFilter {
    /**
    * The URL of the filter.
    */
    'self'?: string;
    /**
    * The unique identifier for the filter.
    */
    'id'?: string;
    /**
    * The name of the filter. Must be unique.
    */
    'name': string;
    /**
    * A description of the filter.
    */
    'description'?: string;
    /**
    * The user who owns the filter. This is defaulted to the creator of the filter, however Jira administrators can change the owner of a shared filter in the admin settings.
    */
    'owner'?: User;
    /**
    * The JQL query for the filter. For example, *project = SSP AND issuetype = Bug*.
    */
    'jql'?: string;
    /**
    * A URL to view the filter results in Jira, using the ID of the filter. For example, *https://your-domain.atlassian.net/issues/?filter=10100*.
    */
    'viewUrl'?: string;
    /**
    * A URL to view the filter results in Jira, using the [Search for issues using JQL](#api-rest-api-2-filter-search-get) operation with the filter\'s JQL string to return the filter results. For example, *https://your-domain.atlassian.net/rest/api/2/search?jql=project+%3D+SSP+AND+issuetype+%3D+Bug*.
    */
    'searchUrl'?: string;
    /**
    * Indicates whether the filter is selected as a favorite by any users, not including the filter owner.
    */
    'favourite'?: boolean;
    /**
    * The count of how many users have selected this filter as a favorite, including the filter owner.
    */
    'favouritedCount'?: number;
    /**
    * The groups and projects that the filter is shared with. This can be specified when updating a filter, but not when creating a filter.
    */
    'sharePermissions'?: Array<SharePermission>;
    /**
    * The users that are subscribed to the filter.
    */
    'subscriptions'?: Array<FilterSubscription>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "self",
            "baseName": "self",
            "type": "string"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "owner",
            "baseName": "owner",
            "type": "User"
        },
        {
            "name": "jql",
            "baseName": "jql",
            "type": "string"
        },
        {
            "name": "viewUrl",
            "baseName": "viewUrl",
            "type": "string"
        },
        {
            "name": "searchUrl",
            "baseName": "searchUrl",
            "type": "string"
        },
        {
            "name": "favourite",
            "baseName": "favourite",
            "type": "boolean"
        },
        {
            "name": "favouritedCount",
            "baseName": "favouritedCount",
            "type": "number"
        },
        {
            "name": "sharePermissions",
            "baseName": "sharePermissions",
            "type": "Array<SharePermission>"
        },
        {
            "name": "subscriptions",
            "baseName": "subscriptions",
            "type": "Array<FilterSubscription>"
        }    ];

    static getAttributeTypeMap() {
        return FoundFilter.attributeTypeMap;
    }
}

