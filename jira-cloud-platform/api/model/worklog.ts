/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { EntityProperty } from './entityProperty';
import { UserDetails } from './userDetails';
import { Visibility } from './visibility';

/**
* Details of a worklog.
*/
export class Worklog extends null<String, object> {
    /**
    * The URL of the worklog item.
    */
    'self'?: string;
    /**
    * Details of the user who created the worklog.
    */
    'author'?: UserDetails;
    /**
    * Details of the user who last updated the worklog.
    */
    'updateAuthor'?: UserDetails;
    /**
    * A comment about the worklog. Optional when creating or updating a worklog.
    */
    'comment'?: string;
    /**
    * The datetime on which the worklog was created.
    */
    'created'?: Date;
    /**
    * The datetime on which the worklog was last updated.
    */
    'updated'?: Date;
    /**
    * Details about any restrictions in the visibility of the worklog. Optional when creating or updating a worklog.
    */
    'visibility'?: Visibility;
    /**
    * The datetime on which the worklog effort was started. Required when creating a worklog. Optional when updating a worklog.
    */
    'started'?: Date;
    /**
    * The time spent working on the issue as days (\\#d), hours (\\#h), or minutes (\\#m or \\#). Required when creating a worklog if `timeSpentSeconds` isn\'t provided. Optional when updating a worklog. Cannot be provided if `timeSpentSecond` is provided.
    */
    'timeSpent'?: string;
    /**
    * The time in seconds spent working on the issue. Required when creating a worklog if `timeSpent` isn\'t provided. Optional when updating a worklog. Cannot be provided if `timeSpent` is provided.
    */
    'timeSpentSeconds'?: number;
    /**
    * The ID of the worklog record.
    */
    'id'?: string;
    /**
    * The ID of the issue this worklog is for.
    */
    'issueId'?: string;
    /**
    * Details of properties for the worklog. Optional when creating or updating a worklog.
    */
    'properties'?: Array<EntityProperty>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "self",
            "baseName": "self",
            "type": "string"
        },
        {
            "name": "author",
            "baseName": "author",
            "type": "UserDetails"
        },
        {
            "name": "updateAuthor",
            "baseName": "updateAuthor",
            "type": "UserDetails"
        },
        {
            "name": "comment",
            "baseName": "comment",
            "type": "string"
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date"
        },
        {
            "name": "updated",
            "baseName": "updated",
            "type": "Date"
        },
        {
            "name": "visibility",
            "baseName": "visibility",
            "type": "Visibility"
        },
        {
            "name": "started",
            "baseName": "started",
            "type": "Date"
        },
        {
            "name": "timeSpent",
            "baseName": "timeSpent",
            "type": "string"
        },
        {
            "name": "timeSpentSeconds",
            "baseName": "timeSpentSeconds",
            "type": "number"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "issueId",
            "baseName": "issueId",
            "type": "string"
        },
        {
            "name": "properties",
            "baseName": "properties",
            "type": "Array<EntityProperty>"
        }    ];

    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(Worklog.attributeTypeMap);
    }
}

