/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export class JsonNode {
    'elements'?: object;
    'number'?: boolean;
    'missingNode'?: boolean;
    'pojo'?: boolean;
    'integralNumber'?: boolean;
    'floatingPointNumber'?: boolean;
    '_int'?: boolean;
    '_long'?: boolean;
    '_double'?: boolean;
    'bigDecimal'?: boolean;
    'bigInteger'?: boolean;
    'textual'?: boolean;
    '_boolean'?: boolean;
    'binary'?: boolean;
    'valueNode'?: boolean;
    'containerNode'?: boolean;
    'object'?: boolean;
    'numberValue'?: number;
    'numberType'?: JsonNode.NumberTypeEnum;
    'intValue'?: number;
    'longValue'?: number;
    'bigIntegerValue'?: number;
    'doubleValue'?: number;
    'decimalValue'?: number;
    'booleanValue'?: boolean;
    'binaryValue'?: Array<string>;
    'valueAsInt'?: number;
    'valueAsLong'?: number;
    'valueAsDouble'?: number;
    'valueAsBoolean'?: boolean;
    'fieldNames'?: object;
    'valueAsText'?: string;
    'textValue'?: string;
    'array'?: boolean;
    'fields'?: object;
    '_null'?: boolean;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "elements",
            "baseName": "elements",
            "type": "object"
        },
        {
            "name": "number",
            "baseName": "number",
            "type": "boolean"
        },
        {
            "name": "missingNode",
            "baseName": "missingNode",
            "type": "boolean"
        },
        {
            "name": "pojo",
            "baseName": "pojo",
            "type": "boolean"
        },
        {
            "name": "integralNumber",
            "baseName": "integralNumber",
            "type": "boolean"
        },
        {
            "name": "floatingPointNumber",
            "baseName": "floatingPointNumber",
            "type": "boolean"
        },
        {
            "name": "_int",
            "baseName": "int",
            "type": "boolean"
        },
        {
            "name": "_long",
            "baseName": "long",
            "type": "boolean"
        },
        {
            "name": "_double",
            "baseName": "double",
            "type": "boolean"
        },
        {
            "name": "bigDecimal",
            "baseName": "bigDecimal",
            "type": "boolean"
        },
        {
            "name": "bigInteger",
            "baseName": "bigInteger",
            "type": "boolean"
        },
        {
            "name": "textual",
            "baseName": "textual",
            "type": "boolean"
        },
        {
            "name": "_boolean",
            "baseName": "boolean",
            "type": "boolean"
        },
        {
            "name": "binary",
            "baseName": "binary",
            "type": "boolean"
        },
        {
            "name": "valueNode",
            "baseName": "valueNode",
            "type": "boolean"
        },
        {
            "name": "containerNode",
            "baseName": "containerNode",
            "type": "boolean"
        },
        {
            "name": "object",
            "baseName": "object",
            "type": "boolean"
        },
        {
            "name": "numberValue",
            "baseName": "numberValue",
            "type": "number"
        },
        {
            "name": "numberType",
            "baseName": "numberType",
            "type": "JsonNode.NumberTypeEnum"
        },
        {
            "name": "intValue",
            "baseName": "intValue",
            "type": "number"
        },
        {
            "name": "longValue",
            "baseName": "longValue",
            "type": "number"
        },
        {
            "name": "bigIntegerValue",
            "baseName": "bigIntegerValue",
            "type": "number"
        },
        {
            "name": "doubleValue",
            "baseName": "doubleValue",
            "type": "number"
        },
        {
            "name": "decimalValue",
            "baseName": "decimalValue",
            "type": "number"
        },
        {
            "name": "booleanValue",
            "baseName": "booleanValue",
            "type": "boolean"
        },
        {
            "name": "binaryValue",
            "baseName": "binaryValue",
            "type": "Array<string>"
        },
        {
            "name": "valueAsInt",
            "baseName": "valueAsInt",
            "type": "number"
        },
        {
            "name": "valueAsLong",
            "baseName": "valueAsLong",
            "type": "number"
        },
        {
            "name": "valueAsDouble",
            "baseName": "valueAsDouble",
            "type": "number"
        },
        {
            "name": "valueAsBoolean",
            "baseName": "valueAsBoolean",
            "type": "boolean"
        },
        {
            "name": "fieldNames",
            "baseName": "fieldNames",
            "type": "object"
        },
        {
            "name": "valueAsText",
            "baseName": "valueAsText",
            "type": "string"
        },
        {
            "name": "textValue",
            "baseName": "textValue",
            "type": "string"
        },
        {
            "name": "array",
            "baseName": "array",
            "type": "boolean"
        },
        {
            "name": "fields",
            "baseName": "fields",
            "type": "object"
        },
        {
            "name": "_null",
            "baseName": "null",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return JsonNode.attributeTypeMap;
    }
}

export namespace JsonNode {
    export enum NumberTypeEnum {
        INT = <any> 'INT',
        LONG = <any> 'LONG',
        BIGINTEGER = <any> 'BIG_INTEGER',
        FLOAT = <any> 'FLOAT',
        DOUBLE = <any> 'DOUBLE',
        BIGDECIMAL = <any> 'BIG_DECIMAL'
    }
}
