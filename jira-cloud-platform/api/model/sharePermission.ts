/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { GroupName } from './groupName';
import { Project } from './project';
import { ProjectRole } from './projectRole';

/**
* Details of a share permission for the filter.
*/
export class SharePermission {
    /**
    * The unique identifier of the share permission.
    */
    'id'?: number;
    /**
    * The type of share permission:   *  `group` Shared with a group. If set in a request, then specify `sharePermission.group` as well.  *  `project` Shared with a project. If set in a request, then specify `sharePermission.project` as well.  *  `projectRole` Share with a project role in a project. This value is not returned in responses. It is used in requests, where it needs to be specify with `projectId` and `projectRoleId`.  *  `global` Shared globally. If set in a request, no other `sharePermission` properties need to be specified.  *  `loggedin` Shared with all logged-in users. Note: This value is set in a request by specifying `authenticated` as the `type`.  *  `project-unknown` Shared with a project that the user does not have access to. Cannot be set in a request.
    */
    'type': SharePermission.TypeEnum;
    /**
    * The project that the filter is shared with. This is similar to the project object returned by [Get project](#api-rest-api-2-project-projectIdOrKey-get) but it contains a subset of the properties, which are: `self`, `id`, `key`, `assigneeType`, `name`, `roles`, `avatarUrls`, `projectType`, `simplified`.   For a request, specify the `id` for the project.
    */
    'project'?: Project;
    /**
    * The project role that the filter is shared with.   For a request, specify the `id` for the role. You must also specify the `project` object and `id` for the project that the role is in.
    */
    'role'?: ProjectRole;
    /**
    * The group that the filter is shared with. For a request, specify the `name` property for the group.
    */
    'group'?: GroupName;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "SharePermission.TypeEnum"
        },
        {
            "name": "project",
            "baseName": "project",
            "type": "Project"
        },
        {
            "name": "role",
            "baseName": "role",
            "type": "ProjectRole"
        },
        {
            "name": "group",
            "baseName": "group",
            "type": "GroupName"
        }    ];

    static getAttributeTypeMap() {
        return SharePermission.attributeTypeMap;
    }
}

export namespace SharePermission {
    export enum TypeEnum {
        Group = <any> 'group',
        Project = <any> 'project',
        ProjectRole = <any> 'projectRole',
        Global = <any> 'global',
        Loggedin = <any> 'loggedin',
        Authenticated = <any> 'authenticated',
        ProjectUnknown = <any> 'project-unknown'
    }
}
