/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import localVarRequest = require('request');
import http = require('http');

/* tslint:disable:no-unused-locals */
import { IssueFieldOption } from '../model/issueFieldOption';
import { PageBeanIssueFieldOption } from '../model/pageBeanIssueFieldOption';
import { TaskProgressBeanRemoveOptionFromIssuesResult } from '../model/taskProgressBeanRemoveOptionFromIssuesResult';

import { ObjectSerializer, Authentication, VoidAuth } from '../model/models';
import { OAuth } from '../model/models';

let defaultBasePath = 'http://localhost';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum IssueFieldOptionsApiApiKeys {
}

export class IssueFieldOptionsApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'OAuth2': new OAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: IssueFieldOptionsApiApiKeys, value: string) {
        (this.authentications as any)[IssueFieldOptionsApiApiKeys[key]].apiKey = value;
    }

    set accessToken(token: string) {
        this.authentications.OAuth2.accessToken = token;
    }

    /**
     * Creates an option for a select list issue field.  Note that this operation **cannot be used with the built-in custom fields**. It only works with issue fields added by Connect apps, as described above.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     * @summary Create issue field option
     * @param fieldKey The field key is specified in the following format: **$(app-key)\\\\\\_\\\\\\_$(field-key)**. For example, *example-add-on\\\\\\_\\\\\\_example-issue-field*.
     * @param requestBody 
     */
    public async comAtlassianJiraRestV2IssueFieldIssueFieldOptionResourceCreateIssueFieldOptionPost (fieldKey: string, requestBody: { [key: string]: object; }, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: IssueFieldOption;  }> {
        const localVarPath = this.basePath + '/rest/api/2/field/{fieldKey}/option'
            .replace('{' + 'fieldKey' + '}', encodeURIComponent(String(fieldKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'fieldKey' is not null or undefined
        if (fieldKey === null || fieldKey === undefined) {
            throw new Error('Required parameter fieldKey was null or undefined when calling comAtlassianJiraRestV2IssueFieldIssueFieldOptionResourceCreateIssueFieldOptionPost.');
        }

        // verify required parameter 'requestBody' is not null or undefined
        if (requestBody === null || requestBody === undefined) {
            throw new Error('Required parameter requestBody was null or undefined when calling comAtlassianJiraRestV2IssueFieldIssueFieldOptionResourceCreateIssueFieldOptionPost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(requestBody, "{ [key: string]: object; }")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: IssueFieldOption;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "IssueFieldOption");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Deletes an option from a select list issue field.  Note that this operation **cannot be used with the built-in custom fields**. It only works with issue fields added by Connect apps, as described above.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     * @summary Delete issue field option
     * @param fieldKey The field key is specified in the following format: **$(app-key)\\\\\\_\\\\\\_$(field-key)**. For example, *example-add-on\\\\\\_\\\\\\_example-issue-field*.
     * @param optionId The ID of the option to be deleted.
     */
    public async comAtlassianJiraRestV2IssueFieldIssueFieldOptionResourceDeleteIssueFieldOptionDelete (fieldKey: string, optionId: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: object;  }> {
        const localVarPath = this.basePath + '/rest/api/2/field/{fieldKey}/option/{optionId}'
            .replace('{' + 'fieldKey' + '}', encodeURIComponent(String(fieldKey)))
            .replace('{' + 'optionId' + '}', encodeURIComponent(String(optionId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'fieldKey' is not null or undefined
        if (fieldKey === null || fieldKey === undefined) {
            throw new Error('Required parameter fieldKey was null or undefined when calling comAtlassianJiraRestV2IssueFieldIssueFieldOptionResourceDeleteIssueFieldOptionDelete.');
        }

        // verify required parameter 'optionId' is not null or undefined
        if (optionId === null || optionId === undefined) {
            throw new Error('Required parameter optionId was null or undefined when calling comAtlassianJiraRestV2IssueFieldIssueFieldOptionResourceDeleteIssueFieldOptionDelete.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: object;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "object");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns all options defined for a select list issue field. A select list issue field is a type of [issue field](https://developer.atlassian.com/cloud/jira/platform/modules/issue-field/) that allows a user to select n value from a list of options.  Note that this operation **cannot be used with the built-in custom fields**. It only works with issue fields added by Connect apps, as described above.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     * @summary Get all issue field options
     * @param fieldKey The field key is specified in the following format: **$(app-key)\\\\\\_\\\\\\_$(field-key)**. For example, *example-add-on\\\\\\_\\\\\\_example-issue-field*.
     * @param startAt The index of the first item to return in a page of results (page offset).
     * @param maxResults The maximum number of items to return per page. The maximum is &#x60;100&#x60;.
     */
    public async comAtlassianJiraRestV2IssueFieldIssueFieldOptionResourceGetAllIssueFieldOptionsGet (fieldKey: string, startAt?: number, maxResults?: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PageBeanIssueFieldOption;  }> {
        const localVarPath = this.basePath + '/rest/api/2/field/{fieldKey}/option'
            .replace('{' + 'fieldKey' + '}', encodeURIComponent(String(fieldKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'fieldKey' is not null or undefined
        if (fieldKey === null || fieldKey === undefined) {
            throw new Error('Required parameter fieldKey was null or undefined when calling comAtlassianJiraRestV2IssueFieldIssueFieldOptionResourceGetAllIssueFieldOptionsGet.');
        }

        if (startAt !== undefined) {
            localVarQueryParameters['startAt'] = ObjectSerializer.serialize(startAt, "number");
        }

        if (maxResults !== undefined) {
            localVarQueryParameters['maxResults'] = ObjectSerializer.serialize(maxResults, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: PageBeanIssueFieldOption;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "PageBeanIssueFieldOption");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns an option from a select list issue field.  Note that this operation **cannot be used with the built-in custom fields**. It only works with issue fields added by Connect apps, as described above.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     * @summary Get issue field option
     * @param fieldKey The field key is specified in the following format: **$(app-key)\\\\\\_\\\\\\_$(field-key)**. For example, *example-add-on\\\\\\_\\\\\\_example-issue-field*.
     * @param optionId The ID of the option to be returned.
     */
    public async comAtlassianJiraRestV2IssueFieldIssueFieldOptionResourceGetIssueFieldOptionGet (fieldKey: string, optionId: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: IssueFieldOption;  }> {
        const localVarPath = this.basePath + '/rest/api/2/field/{fieldKey}/option/{optionId}'
            .replace('{' + 'fieldKey' + '}', encodeURIComponent(String(fieldKey)))
            .replace('{' + 'optionId' + '}', encodeURIComponent(String(optionId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'fieldKey' is not null or undefined
        if (fieldKey === null || fieldKey === undefined) {
            throw new Error('Required parameter fieldKey was null or undefined when calling comAtlassianJiraRestV2IssueFieldIssueFieldOptionResourceGetIssueFieldOptionGet.');
        }

        // verify required parameter 'optionId' is not null or undefined
        if (optionId === null || optionId === undefined) {
            throw new Error('Required parameter optionId was null or undefined when calling comAtlassianJiraRestV2IssueFieldIssueFieldOptionResourceGetIssueFieldOptionGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: IssueFieldOption;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "IssueFieldOption");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns options defined for a select list issue field that can be viewed and selected by the user.  Note that this operation **cannot be used with the built-in custom fields**. It only works with issue fields added by Connect apps, as described above.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Get selectable issue field options
     * @param fieldKey The field key is specified in the following format: **$(app-key)\\\\\\_\\\\\\_$(field-key)**. For example, *example-add-on\\\\\\_\\\\\\_example-issue-field*.
     * @param startAt The index of the first item to return in a page of results (page offset).
     * @param maxResults The maximum number of items to return per page. The maximum is &#x60;100&#x60;.
     * @param projectId Filters the results to options that are only available in the specified project.
     */
    public async comAtlassianJiraRestV2IssueFieldIssueFieldOptionResourceGetSelectableIssueFieldOptionsGet (fieldKey: string, startAt?: number, maxResults?: number, projectId?: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PageBeanIssueFieldOption;  }> {
        const localVarPath = this.basePath + '/rest/api/2/field/{fieldKey}/option/suggestions/edit'
            .replace('{' + 'fieldKey' + '}', encodeURIComponent(String(fieldKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'fieldKey' is not null or undefined
        if (fieldKey === null || fieldKey === undefined) {
            throw new Error('Required parameter fieldKey was null or undefined when calling comAtlassianJiraRestV2IssueFieldIssueFieldOptionResourceGetSelectableIssueFieldOptionsGet.');
        }

        if (startAt !== undefined) {
            localVarQueryParameters['startAt'] = ObjectSerializer.serialize(startAt, "number");
        }

        if (maxResults !== undefined) {
            localVarQueryParameters['maxResults'] = ObjectSerializer.serialize(maxResults, "number");
        }

        if (projectId !== undefined) {
            localVarQueryParameters['projectId'] = ObjectSerializer.serialize(projectId, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: PageBeanIssueFieldOption;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "PageBeanIssueFieldOption");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns options defined for a select list issue field that can be viewed by the user.  Note that this operation **cannot be used with the built-in custom fields**. It only works with issue fields added by Connect apps, as described above.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Get visible issue field options
     * @param fieldKey The field key is specified in the following format: **$(app-key)\\\\\\_\\\\\\_$(field-key)**. For example, *example-add-on\\\\\\_\\\\\\_example-issue-field*.
     * @param startAt The index of the first item to return in a page of results (page offset).
     * @param maxResults The maximum number of items to return per page. The maximum is &#x60;100&#x60;.
     * @param projectId Filters the results to options that are only available in the specified project.
     */
    public async comAtlassianJiraRestV2IssueFieldIssueFieldOptionResourceGetVisibleIssueFieldOptionsGet (fieldKey: string, startAt?: number, maxResults?: number, projectId?: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PageBeanIssueFieldOption;  }> {
        const localVarPath = this.basePath + '/rest/api/2/field/{fieldKey}/option/suggestions/search'
            .replace('{' + 'fieldKey' + '}', encodeURIComponent(String(fieldKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'fieldKey' is not null or undefined
        if (fieldKey === null || fieldKey === undefined) {
            throw new Error('Required parameter fieldKey was null or undefined when calling comAtlassianJiraRestV2IssueFieldIssueFieldOptionResourceGetVisibleIssueFieldOptionsGet.');
        }

        if (startAt !== undefined) {
            localVarQueryParameters['startAt'] = ObjectSerializer.serialize(startAt, "number");
        }

        if (maxResults !== undefined) {
            localVarQueryParameters['maxResults'] = ObjectSerializer.serialize(maxResults, "number");
        }

        if (projectId !== undefined) {
            localVarQueryParameters['projectId'] = ObjectSerializer.serialize(projectId, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: PageBeanIssueFieldOption;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "PageBeanIssueFieldOption");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Deselects an issue-field select-list option from all issues where it is selected. A different option can be selected to replace the deselected option. The update can also be limited to a smaller set of issues by using a JQL query.  This is an [asynchronous operation](#async). The response object contains a link to the long-running task.  Note that this operation **cannot be used with the built-in custom fields**. It only works with issue fields added by Connect apps, as described above.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     * @summary Replace issue field option
     * @param fieldKey The field key is specified in the following format: **$(app-key)\\\\\\_\\\\\\_$(field-key)**. For example, *example-add-on\\\\\\_\\\\\\_example-issue-field*.
     * @param optionId The ID of the option to be deselected.
     * @param replaceWith The ID of the option that will replace the currently selected option.
     * @param jql A JQL query that specifies the issues to be updated. For example, *project&#x3D;10000*.
     */
    public async comAtlassianJiraRestV2IssueFieldIssueFieldOptionResourceReplaceIssueFieldOptionDelete (fieldKey: string, optionId: number, replaceWith?: number, jql?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/rest/api/2/field/{fieldKey}/option/{optionId}/issue'
            .replace('{' + 'fieldKey' + '}', encodeURIComponent(String(fieldKey)))
            .replace('{' + 'optionId' + '}', encodeURIComponent(String(optionId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'fieldKey' is not null or undefined
        if (fieldKey === null || fieldKey === undefined) {
            throw new Error('Required parameter fieldKey was null or undefined when calling comAtlassianJiraRestV2IssueFieldIssueFieldOptionResourceReplaceIssueFieldOptionDelete.');
        }

        // verify required parameter 'optionId' is not null or undefined
        if (optionId === null || optionId === undefined) {
            throw new Error('Required parameter optionId was null or undefined when calling comAtlassianJiraRestV2IssueFieldIssueFieldOptionResourceReplaceIssueFieldOptionDelete.');
        }

        if (replaceWith !== undefined) {
            localVarQueryParameters['replaceWith'] = ObjectSerializer.serialize(replaceWith, "number");
        }

        if (jql !== undefined) {
            localVarQueryParameters['jql'] = ObjectSerializer.serialize(jql, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Updates or creates an option for a select list issue field. This operation requires that the option ID is provided when creating an option, therefore, the option ID needs to be specified as a path and body parameter. The option ID provided in the path and body must be identical.  Note that this operation **cannot be used with the built-in custom fields**. It only works with issue fields added by Connect apps, as described above.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     * @summary Update issue field option
     * @param fieldKey The field key is specified in the following format: **$(app-key)\\\\\\_\\\\\\_$(field-key)**. For example, *example-add-on\\\\\\_\\\\\\_example-issue-field*.
     * @param optionId The ID of the option to be updated.
     * @param issueFieldOption 
     */
    public async comAtlassianJiraRestV2IssueFieldIssueFieldOptionResourceUpdateIssueFieldOptionPut (fieldKey: string, optionId: number, issueFieldOption: IssueFieldOption, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: IssueFieldOption;  }> {
        const localVarPath = this.basePath + '/rest/api/2/field/{fieldKey}/option/{optionId}'
            .replace('{' + 'fieldKey' + '}', encodeURIComponent(String(fieldKey)))
            .replace('{' + 'optionId' + '}', encodeURIComponent(String(optionId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'fieldKey' is not null or undefined
        if (fieldKey === null || fieldKey === undefined) {
            throw new Error('Required parameter fieldKey was null or undefined when calling comAtlassianJiraRestV2IssueFieldIssueFieldOptionResourceUpdateIssueFieldOptionPut.');
        }

        // verify required parameter 'optionId' is not null or undefined
        if (optionId === null || optionId === undefined) {
            throw new Error('Required parameter optionId was null or undefined when calling comAtlassianJiraRestV2IssueFieldIssueFieldOptionResourceUpdateIssueFieldOptionPut.');
        }

        // verify required parameter 'issueFieldOption' is not null or undefined
        if (issueFieldOption === null || issueFieldOption === undefined) {
            throw new Error('Required parameter issueFieldOption was null or undefined when calling comAtlassianJiraRestV2IssueFieldIssueFieldOptionResourceUpdateIssueFieldOptionPut.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(issueFieldOption, "IssueFieldOption")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));

        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: IssueFieldOption;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "IssueFieldOption");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
}
