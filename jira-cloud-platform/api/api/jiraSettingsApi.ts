/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import localVarRequest = require('request');
import http = require('http');

/* tslint:disable:no-unused-locals */
import { ApplicationProperty } from '../model/applicationProperty';
import { Configuration } from '../model/configuration';
import { SimpleApplicationPropertyBean } from '../model/simpleApplicationPropertyBean';

import { ObjectSerializer, Authentication, VoidAuth } from '../model/models';

let defaultBasePath = 'http://localhost';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum JiraSettingsApiApiKeys {
}

export class JiraSettingsApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: JiraSettingsApiApiKeys, value: string) {
        (this.authentications as any)[JiraSettingsApiApiKeys[key]].apiKey = value;
    }

    /**
     * Returns the application properties that are accessible on the *Advanced Settings* page. To navigate to the *Advanced Settings* page in Jira, choose the Jira icon > **Jira settings** > **System**, **General Configuration** and then click **Advanced Settings** (in the upper right).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Get advanced settings
     */
    public async comAtlassianJiraRestV2AdminApplicationPropertiesResourceGetAdvancedSettingsGet (options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Array<ApplicationProperty>;  }> {
        const localVarPath = this.basePath + '/rest/api/2/application-properties/advanced-settings';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: Array<ApplicationProperty>;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "Array<ApplicationProperty>");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns all application properties or an application property.  If you specify a value for the `key` parameter, then an application property is returned as an object (not in an array). Otherwise, an array of all editable application properties is returned. See [Set application property](#api-rest-api-2-application-properties-id-put) for descriptions of editable properties.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Get application property
     * @param key The key of the application property.
     * @param permissionLevel The permission level of all items being returned in the list.
     * @param keyFilter When a &#x60;key&#x60; isn\&#39;t provided, this filters the list of results by the application property &#x60;key&#x60; using a regular expression. For example, using &#x60;jira.lf.*&#x60; will return all application properties with keys that start with *jira.lf.*.
     */
    public async comAtlassianJiraRestV2AdminApplicationPropertiesResourceGetApplicationPropertyGet (key?: string, permissionLevel?: string, keyFilter?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Array<ApplicationProperty>;  }> {
        const localVarPath = this.basePath + '/rest/api/2/application-properties';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (key !== undefined) {
            localVarQueryParameters['key'] = ObjectSerializer.serialize(key, "string");
        }

        if (permissionLevel !== undefined) {
            localVarQueryParameters['permissionLevel'] = ObjectSerializer.serialize(permissionLevel, "string");
        }

        if (keyFilter !== undefined) {
            localVarQueryParameters['keyFilter'] = ObjectSerializer.serialize(keyFilter, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: Array<ApplicationProperty>;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "Array<ApplicationProperty>");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Changes the value of an application property. For example, you can change the value of the `jira.clone.prefix` from its default value of *CLONE -* to *Clone -* if you prefer sentence case capitalization. Editable properties are described below along with their default values.  #### Advanced settings ####  The advanced settings below are also accessible in [Jira](https://confluence.atlassian.com/x/vYXKM).  <table>   <thead>    <tr>     <th>Key</th>     <th>Description</th>     <th>Default value</th>    </tr>   </thead>   <tbody>    <tr>     <td><code>jira.clone.prefix</code></td>     <td>A string of text that automatically precedes the title of a cloned issue.</td>     <td><code>CLONE -</code></td>    </tr>    <tr>     <td><code>jira.date.picker.java.format</code></td>     <td>The date format for the Java (server-side) generated dates. This must be the same as the <code>jira.date.picker.javascript.format</code> format setting.</td>     <td><code>d/MMM/yy</code></td>    </tr>    <tr>     <td><code>jira.date.picker.javascript.format</code></td>     <td>This date format is for the JavaScript (client-side) generated dates. This must be the same as the <code>jira.date.picker.java.format</code> format setting.</td>     <td><code>%e/%b/%y</code></td>    </tr>    <tr>     <td><code>jira.date.time.picker.java.format</code></td>     <td>The date format for the Java (server-side) generated date times. This must be the same as the <code>jira.date.time.picker.javascript.format</code> format setting.</td>     <td><code>dd/MMM/yy h:mm a</code></td>    </tr>    <tr>     <td><code>jira.date.time.picker.javascript.format</code></td>     <td>This date format is for the JavaScript (client-side) generated date times. This must be the same as the <code>jira.date.time.picker.java.format</code> format setting.</td>     <td><code>%e/%b/%y %I:%M %p</code></td>    </tr>    <tr>     <td><code>jira.issue.actions.order</code></td>     <td>The default order of actions (such as <em>Comments</em> or <em>Change history</em>) displayed on the issue view.</td>     <td><code>asc</code></td>    </tr>    <tr>     <td><code>jira.table.cols.subtasks</code></td>     <td>The columns to show while viewing subtask issues in a table. For example, a list of subtasks on an issue.</td>     <td><code>issuetype, status, assignee, progress</code></td>    </tr>    <tr>     <td><code>jira.view.issue.links.sort.order</code></td>     <td>The sort order of the list of issue links on the issue view.</td>     <td><code>type, status, priority</code></td>    </tr>    <tr>     <td><code>jira.comment.collapsing.minimum.hidden</code></td>     <td>The minimum number of comments required for comment collapsing to occur. A value of <code>0</code> disables comment collapsing.</td>     <td><code>4</code></td>    </tr>    <tr>     <td><code>jira.newsletter.tip.delay.days</code></td>     <td>The number of days before a prompt to sign up to the Jira Insiders newsletter is shown. A value of <code>-1</code> disables this functionality.</td>     <td><code>7</code></td>    </tr>   </tbody>  </table>  #### Look and feel ####  The settings listed below adjust the [look and feel](https://confluence.atlassian.com/x/VwCLLg).  <table>   <thead>    <tr>     <th>Key</th>     <th>Description</th>     <th>Default value</th>    </tr>   </thead>   <tbody>    <tr>     <td><code>jira.lf.date.time</code></td>     <td>Look and feel of the <a href=\"https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html\" rel=\"nofollow\">time format</a>.</td>     <td><code>h:mm a</code></td>    </tr>    <tr>     <td><code>jira.lf.date.day</code></td>     <td>Look and feel of the <a href=\"https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html\" rel=\"nofollow\">day format</a>.</td>     <td><code>EEEE h:mm a</code></td>    </tr>    <tr>     <td><code>jira.lf.date.complete</code></td>     <td>Look and feel of the <a href=\"https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html\" rel=\"nofollow\">date and time format</a>.</td>     <td><code>dd/MMM/yy h:mm a</code></td>    </tr>    <tr>     <td><code>jira.lf.date.dmy</code></td>     <td>Look and feel of the <a href=\"https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html\" rel=\"nofollow\">date format</a>.</td>     <td><code>dd/MMM/yy</code></td>    </tr>    <tr>     <td><code>jira.date.time.picker.use.iso8061</code></td>     <td>When enabled, sets Monday as the first day of the week in the date picker, as specified by the ISO8601 standard.</td>     <td><code>false</code></td>    </tr>    <tr>     <td><code>jira.lf.logo.url</code></td>     <td>The URL of the logo image file.</td>     <td><code>/images/icon-jira-logo.png</code></td>    </tr>    <tr>     <td><code>jira.lf.logo.show.application.title</code></td>     <td>Controls the visibility of the application title on the sidebar.</td>     <td><code>false</code></td>    </tr>    <tr>     <td><code>jira.lf.favicon.url</code></td>     <td>The URL of the favicon.</td>     <td><code>/favicon.ico</code></td>    </tr>    <tr>     <td><code>jira.lf.favicon.hires.url</code></td>     <td>The URL of the high resolution favicon.</td>     <td><code>/images/64jira.png</code></td>    </tr>    <tr>     <td><code>jira.lf.top.adg3.bgcolour</code></td>     <td>The background color of the sidebar.</td>     <td><code>#0747A6</code></td>    </tr>    <tr>     <td><code>jira.lf.top.adg3.textcolour</code></td>     <td>The color of the text and logo of the sidebar.</td>     <td><code>#DEEBFF</code></td>    </tr>    <tr>     <td><code>jira.lf.hero.button.base.bg.colour</code></td>     <td></td>     <td><code>#3b7fc4</code></td>    </tr>    <tr>     <td><code>jira.title</code></td>     <td>The text for the application title. The application title can also be set in <em>General settings</em>.</td>     <td><code>Jira</code></td>    </tr>    <tr>     <td><code>jira.option.globalsharing</code></td>     <td>boolean</td>     <td><code>true</code></td>    </tr>    <tr>     <td><code>xflow.product.suggestions.enabled</code></td>     <td>Indicates whether to expose product suggestions for other Atlassian products within Jira.</td>     <td><code>true</code></td>    </tr>   </tbody>  </table>  #### Other settings ####  <table>   <thead>    <tr>     <th>Key</th>     <th>Description</th>     <th>Default value</th>    </tr>   </thead>   <tbody>    <tr>     <td><code>jira.issuenav.criteria.autoupdate</code></td>     <td>Supports instant updates to search criteria.</td>     <td><code>true</code></td>    </tr>   </tbody>  </table>  *Note: Be careful when changing [application properties and advanced settings](https://confluence.atlassian.com/x/vYXKM).*  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Set application property
     * @param id The key of the application property to update.
     * @param simpleApplicationPropertyBean 
     */
    public async comAtlassianJiraRestV2AdminApplicationPropertiesResourceSetApplicationPropertyPut (id: string, simpleApplicationPropertyBean: SimpleApplicationPropertyBean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: ApplicationProperty;  }> {
        const localVarPath = this.basePath + '/rest/api/2/application-properties/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2AdminApplicationPropertiesResourceSetApplicationPropertyPut.');
        }

        // verify required parameter 'simpleApplicationPropertyBean' is not null or undefined
        if (simpleApplicationPropertyBean === null || simpleApplicationPropertyBean === undefined) {
            throw new Error('Required parameter simpleApplicationPropertyBean was null or undefined when calling comAtlassianJiraRestV2AdminApplicationPropertiesResourceSetApplicationPropertyPut.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(simpleApplicationPropertyBean, "SimpleApplicationPropertyBean")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: ApplicationProperty;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "ApplicationProperty");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns the [global settings](https://confluence.atlassian.com/x/qYXKM) in Jira. These settings determine whether optional features (for example, subtasks, time tracking, and others) are enabled. If time tracking is enabled, this operation also returns the time tracking configuration.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.
     * @summary Get global settings
     */
    public async comAtlassianJiraRestV2AdminConfigurationResourceGetConfigurationGet (options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Configuration;  }> {
        const localVarPath = this.basePath + '/rest/api/2/configuration';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: Configuration;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "Configuration");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
}
